{"remainingRequest":"/Users/tk/GitHub/corona-memories/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/corona-memories/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/corona-memories/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/src/components/vis.vue","mtime":1612973798638},{"path":"/Users/tk/GitHub/corona-memories/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tk/GitHub/corona-memories/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtb3VudGVkOiBmYWxzZSwKICAgICAgb3BhY2l0eTogLjcsCiAgICAgIG1ldHJpYzogJ3JlbGF0aXZlJywKICAgICAgY3N2OiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHNjYWxlczogZnVuY3Rpb24gc2NhbGVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmNzdikgcmV0dXJuIG51bGw7CiAgICAgIHZhciB5RG9tYWluID0gWzAsIGQzLm1heCh0aGlzLmNzdiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gK2RbX3RoaXMubWV0cmljXTsKICAgICAgfSldOwogICAgICB2YXIgeERvbWFpbiA9IGQzLmV4dGVudCh0aGlzLmNzdiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5kYXRlOwogICAgICB9KTsKICAgICAgdmFyIHggPSBkMy5zY2FsZVRpbWUoKS5kb21haW4oeERvbWFpbikucmFuZ2UoWzUwLCA2NTBdKTsKICAgICAgdmFyIHkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih5RG9tYWluKS5yYW5nZShbNDAwLCA1MF0pOwogICAgICByZXR1cm4gewogICAgICAgIHg6IHgsCiAgICAgICAgeTogeQogICAgICB9OwogICAgfSwKICAgIHJlYWN0aW9uczogZnVuY3Rpb24gcmVhY3Rpb25zKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5jb3VudHJpZXMpIHJldHVybiBmYWxzZTsKICAgICAgdmFyIGZvcm1hdFRpbWUgPSBkMy50aW1lRm9ybWF0KCIlbS8lZC8leSIpOwogICAgICB2YXIgcmVhY3Rpb25BcnIgPSBbXTsgLy9jcmVhdGUgc2FtcGxlIHJlYWN0aW9ucwoKICAgICAgT2JqZWN0LmtleXModGhpcy5jb3VudHJpZXMpLmZvckVhY2goZnVuY3Rpb24gKGNvdW50cnkpIHsKICAgICAgICBkMy5yYW5nZSg1MDApLmZvckVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGRhdGUgPSBfdGhpczIuZ2V0UmFuZG9tRGF0ZShfdGhpczIuc2NhbGVzLnguZG9tYWluKCkpOwoKICAgICAgICAgIHJlYWN0aW9uQXJyLnB1c2goewogICAgICAgICAgICBkYXRlOiBkYXRlLAogICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmNvdW50cmllc1tjb3VudHJ5XS5jYXNlcy5maW5kKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWUoYy5kYXRlKSA9PSBmb3JtYXRUaW1lKGRhdGUpOwogICAgICAgICAgICB9KVtfdGhpczIubWV0cmljXSwKICAgICAgICAgICAgY29tbWVudDogImZvb2JhciIsCiAgICAgICAgICAgIHdlaWdodDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSksCiAgICAgICAgICAgIGNvdW50cnk6IGNvdW50cnkKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgLypyZWFjdGlvbkFyci5mb3JFYWNoKHJlYWN0aW9uID0+IHsKICAgICAgICByZWFjdGlvbi54eCA9IHRoaXMuc2NhbGVzLngocmVhY3Rpb24uZGF0ZSkKICAgICAgICByZWFjdGlvbi55eSA9IHRoaXMuc2NhbGVzLnkocmVhY3Rpb24udmFsdWUpCiAgICAgIH0pKi8KCiAgICAgIHZhciBmb3JjZSA9IGQzLmZvcmNlU2ltdWxhdGlvbihyZWFjdGlvbkFycikgLy8uZm9yY2UoJ2NoYXJnZScsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgxMCkpCiAgICAgIC8vLmZvcmNlKCdjZW50ZXInLCBkMy5mb3JjZUNlbnRlcigwLDApKQogICAgICAvL2NhbGN1bGF0ZSBmaXJzdCwgdGhlbiB1c2Ugc3RyYWlnaHQgdmFsdWVzIGhlcmUKICAgICAgLy8uZm9yY2UoJ2ZvcmNlWCcsIGQzLmZvcmNlWChyZWFjdGlvbiA9PiByZWFjdGlvbi54eCkuc3RyZW5ndGgoMSkpCiAgICAgIC8vLmZvcmNlKCdmb3JjZVknLCBkMy5mb3JjZVkocmVhY3Rpb24gPT4gcmVhY3Rpb24ueXkpLnN0cmVuZ3RoKDIpKQogICAgICAvL25vIHByZS1jYWxjdWxhdGlvbiwgYnV0IGRvbnQgaGF2ZSBvcmlnaW5hbCB2YWx1ZXMgaGVyZQogICAgICAvLy5mb3JjZSgnZm9yY2VYJywgZDMuZm9yY2VYKHJlYWN0aW9uID0+IHRoaXMuc2NhbGVzLngocmVhY3Rpb24uZGF0ZSkpLnN0cmVuZ3RoKDEpKQogICAgICAvLy5mb3JjZSgnZm9yY2VZJywgZDMuZm9yY2VZKHJlYWN0aW9uID0+IHRoaXMuc2NhbGVzLnkocmVhY3Rpb24udmFsdWUpICkuc3RyZW5ndGgoMikpCiAgICAgIC8vZGV2aWF0ZSB3aXRoIG1vZHVsbwogICAgICAuZm9yY2UoJ2ZvcmNlWCcsIGQzLmZvcmNlWChmdW5jdGlvbiAocmVhY3Rpb24pIHsKICAgICAgICByZXR1cm4gX3RoaXMyLnNjYWxlcy54KHJlYWN0aW9uLmRhdGUpOwogICAgICB9KS5zdHJlbmd0aCguMSkpLmZvcmNlKCdmb3JjZVknLCBkMy5mb3JjZVkoZnVuY3Rpb24gKHJlYWN0aW9uLCBpKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMi5zY2FsZXMueShyZWFjdGlvbi52YWx1ZSkgKyAoLTggKyBpICUgMiAqIDEwKTsKICAgICAgfSkuc3RyZW5ndGgoLjEpKS5mb3JjZSgnY29sbGlkZScsIGQzLmZvcmNlQ29sbGlkZShmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLndlaWdodDsKICAgICAgfSkpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWFjdGlvbkFyci5sZW5ndGg7ICsraSkgewogICAgICAgIC8vY29uc29sZS5sb2cocmVhY3Rpb25BcnJbaV0pCiAgICAgICAgZm9yY2UudGljaygpOwogICAgICB9CgogICAgICBjb25zb2xlLmxvZyhmb3JjZS5ub2RlcygpKTsKICAgICAgcmV0dXJuIGZvcmNlLm5vZGVzKCk7CiAgICB9LAogICAgY291bnRyaWVzOiBmdW5jdGlvbiBjb3VudHJpZXMoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmNzdiB8fCAhdGhpcy5zY2FsZXMpIHJldHVybiBmYWxzZTsKICAgICAgdmFyIGxpbmVHZW5lcmF0b3IgPSBkMy5saW5lKCkueChmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBfdGhpczMuc2NhbGVzLngoZC5kYXRlKTsKICAgICAgfSkueShmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBfdGhpczMuc2NhbGVzLnkoZFtfdGhpczMubWV0cmljXSk7CiAgICAgIH0pOwogICAgICB2YXIgY291bnRyaWVzTWFwID0gZDMuZ3JvdXAodGhpcy5jc3YsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQuY291bnRyeTsKICAgICAgfSk7CiAgICAgIHZhciBjb3VudHJpZXNPYmogPSBPYmplY3QuZnJvbUVudHJpZXMoY291bnRyaWVzTWFwKTsKICAgICAgT2JqZWN0LmtleXMoY291bnRyaWVzT2JqKS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICAgIGNvdW50cmllc09ialtrZXldID0gewogICAgICAgICAgY2FzZXM6IGNvdW50cmllc09ialtrZXldLAogICAgICAgICAgbGluZTogbGluZUdlbmVyYXRvcihjb3VudHJpZXNPYmpba2V5XSkKICAgICAgICB9OwogICAgICB9KTsKICAgICAgcmV0dXJuIGNvdW50cmllc09iajsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICB2YXIgcGFyc2VEYXRlID0gZDMudXRjUGFyc2UoIiVtLyVkLyV5Iik7CiAgICBkMy5jc3YoJ2RhdGEuY3N2JykudGhlbihmdW5jdGlvbiAoZCkgewogICAgICBfdGhpczQuY3N2ID0gZC5tYXAoZnVuY3Rpb24gKHJvdykgewogICAgICAgIHJvdy5kYXRlID0gcGFyc2VEYXRlKHJvdy5kYXRlKTsKICAgICAgICByZXR1cm4gcm93OwogICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5jb3VudHJ5ID09ICJHZXJtYW55IjsKICAgICAgfSk7CiAgICB9KTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0UmFuZG9tRGF0ZTogZnVuY3Rpb24gZ2V0UmFuZG9tRGF0ZShleHRlbnQpIHsKICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShleHRlbnRbMF0uZ2V0VGltZSgpICsgTWF0aC5yYW5kb20oKSAqIChleHRlbnRbMV0uZ2V0VGltZSgpIC0gZXh0ZW50WzBdLmdldFRpbWUoKSkpOwogICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDApOwogICAgICByZXR1cm4gZGF0ZTsKICAgIH0sCiAgICBob3ZlcjogZnVuY3Rpb24gaG92ZXIocmVhY3Rpb24sIGV2ZW50KSB7CiAgICAgIHZhciByID0gNzsKICAgICAgdmFyIG9wYWNpdHkgPSAxOwoKICAgICAgaWYgKGV2ZW50LnR5cGUgPT0gJ21vdXNlb3V0JykgewogICAgICAgIHIgPSByZWFjdGlvbi53ZWlnaHQ7CiAgICAgICAgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTsKICAgICAgfQoKICAgICAgZDMuc2VsZWN0KGV2ZW50LnRhcmdldCkudHJhbnNpdGlvbigpLmF0dHIoInIiLCByKS5hdHRyKCJvcGFjaXR5Iiwgb3BhY2l0eSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["vis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <svg width=\"700\" height=\"1000\">\n    <defs>\n      <filter id=\"f1\"><feGaussianBlur in=\"SourceGraphic\" :stdDeviation=\"0\" /></filter>\n    </defs>\n\n    <g class=\"lines\" v-if=\"countries\">\n      <path v-for=\"country,i in countries\" :key=\"i\" :d=\"country.line\" filter=\"url(#f1)\" />\n    </g>\n\n    <g class=\"reactions\" v-if=\"reactions\" transform=\"translate(0,0)\">\n      <circle v-for=\"reaction, j in reactions\" :key=\"j\" :cx=\"reaction.x\" :cy=\"reaction.y\" :opacity=\"opacity\" :r=\"reaction.weight\" fill=\"#AFFE06\" @mouseover=\"hover(reaction,$event)\" @mouseout=\"hover(reaction,$event)\" />\n    </g>\n  </svg>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n components: {\n },\n\n\n data () {\n   return {\n     mounted: false,\n     opacity: .7,\n     metric: 'relative',\n     csv: null,\n   }\n },\n\n\n computed: {\n   scales: function() {\n     if(!this.csv) return null\n     let yDomain = [0,d3.max(this.csv, d=>+d[this.metric])]\n     let xDomain = d3.extent(this.csv, d=>d.date)\n     let x = d3.scaleTime().domain(xDomain).range([50,650])\n     let y = d3.scaleLinear().domain(yDomain).range([400,50])\n\n     return {x: x, y: y}\n   },\n\n   reactions: function(){\n     if(!this.countries) return false\n\n     let formatTime = d3.timeFormat(\"%m/%d/%y\")\n     let reactionArr = [] //create sample reactions\n     Object.keys(this.countries).forEach(country => {\n       d3.range(500).forEach(() => {\n         let date = this.getRandomDate(this.scales.x.domain())\n         reactionArr.push({\n           date: date,\n           value: this.countries[country].cases.find(c => formatTime(c.date) == formatTime(date))[this.metric],\n           comment: \"foobar\",\n           weight: Math.floor(Math.random()*5),\n           country: country,\n         })\n       })\n     })\n\n     /*reactionArr.forEach(reaction => {\n       reaction.xx = this.scales.x(reaction.date)\n       reaction.yy = this.scales.y(reaction.value)\n     })*/\n\n     let force = d3.forceSimulation(reactionArr)\n      //.force('charge', d3.forceManyBody().strength(10))\n      //.force('center', d3.forceCenter(0,0))\n\n      //calculate first, then use straight values here\n      //.force('forceX', d3.forceX(reaction => reaction.xx).strength(1))\n      //.force('forceY', d3.forceY(reaction => reaction.yy).strength(2))\n\n      //no pre-calculation, but dont have original values here\n      //.force('forceX', d3.forceX(reaction => this.scales.x(reaction.date)).strength(1))\n      //.force('forceY', d3.forceY(reaction => this.scales.y(reaction.value) ).strength(2))\n\n      //deviate with modulo\n      .force('forceX', d3.forceX(reaction => this.scales.x(reaction.date)).strength(.1))\n      .force('forceY', d3.forceY((reaction,i) => this.scales.y(reaction.value) + (-8 + (i%2)*10)).strength(.1))\n      .force('collide', d3.forceCollide(d => d.weight))\n\n      for (let i = 0; i < reactionArr.length; ++i) {\n        //console.log(reactionArr[i])\n         force.tick()\n       }\n\n       console.log(force.nodes())\n\n     return force.nodes()\n\n   },\n\n   countries: function() {\n     if(!this.csv || !this.scales) return false\n\n     const lineGenerator = d3.line()\n      .x(d => this.scales.x(d.date))\n      .y(d => this.scales.y(d[this.metric]))\n\n    let countriesMap = d3.group(this.csv, d => d.country)\n    let countriesObj = Object.fromEntries(countriesMap)\n    Object.keys(countriesObj).map(key => {\n      countriesObj[key] = {\n        cases: countriesObj[key],\n        line: lineGenerator(countriesObj[key])\n      }\n    })\n    return countriesObj\n   },\n },\n\n created() {\n   const parseDate = d3.utcParse(\"%m/%d/%y\")\n   d3.csv('data.csv').then(d => {\n     this.csv = d.map(row => {\n       row.date = parseDate(row.date)\n       return row\n     })\n     .filter(d=> d.country == \"Germany\")\n   })\n\n },\n\n mounted() {\n   this.mounted = true\n },\n\n methods: {\n   getRandomDate: function(extent) {\n     let date = new Date(extent[0].getTime() + Math.random() * (extent[1].getTime() - extent[0].getTime()))\n     date.setHours(0,0,0)\n     return date\n   },\n\n   hover: function(reaction,event) {\n     let r = 7\n     let opacity = 1\n     if(event.type == 'mouseout') {\n       r = reaction.weight\n       opacity = this.opacity\n     }\n     d3.select(event.target).transition().attr(\"r\",r).attr(\"opacity\",opacity)\n   }\n }\n}\n</script>\n\n<style scoped>\n  path {\n    fill: none;\n    stroke: white;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}