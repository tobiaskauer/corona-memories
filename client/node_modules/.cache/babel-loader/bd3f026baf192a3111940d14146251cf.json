{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/vis.vue","mtime":1615567622705},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <svg :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" v-if=\"mounted\" z-index=\"5\">\n    \n    <lines\n      :dimensions=\"options.dimensions\"\n      :scales=\"scales\"\n      :cases=\"parsedCases\" />\n\n    <g v-if=\"force\" class=\"memories\"  transform=\"translate(0,0)\"> <!-- can go to component, actually.... -->\n      <circle\n        v-for=\"circle, i in parsedMemories.filter((e,i) => i < options.progress)\" :key=\"'circle-'+i\"\n        :cx=\"circle.x\"\n        :cy=\"circle.y\"\n        :class=\"{inactive: circle.inactive}\"\n        :r=\"circle.radius\"\n        fill=\"#FA5E2D\"\n        :opacity=\"opacity\"\n        @click=\"$emit('showMemory',circle)\"\n        @mouseover=\"hover(circle,$event)\"\n        @mouseout=\"hover(circle,$event)\" />\n         \n      <!-- show hashtag labels (once all memories are visible) -->\n      <g v-if=\"hashtagLabels && options.progress >= parsedMemories.length - 10\">\n        <g v-for=\"(link,i) in hashtagLabels\" :key=\"'label-'+i\" pointer-events=\"none\">\n          <line stroke=\"#FA5E2D\" stroke-width=\".5\" :x1=\"link.source.x\" :y1=\"link.source.y\" :x2=\"link.target.x\" :y2=\"link.target.y+1\" />\n          <text style=\"text-decoration: underline;\" font-weight=\"bold\" fill=\"#FA5E2D\" font-size=\"11\" :x=\"link.target.x\" :text-anchor=\"link.target.anchor\" :y=\"link.target.y\">{{link.target.text}}</text>\n        </g>\n      </g>\n    </g>\n\n\n    <g class=\"datePicker\" @click=\"$emit('toggleForm', formatDate(newMemory.date))\"\n     v-if=\"datePicker\"\n     :transform=\"`translate(${newMemory.position.x},0)`\"> <!-- can go to own component -->\n      <line y1=\"0\" :y2=\"options.dimensions.height\" x1=\"0\" x2=\"0\" stroke=\"#FA5E2D\" stroke-width=\"2px\"  stroke-dasharray=\"0\"/>\n      <circle r=\"40\" cx=\"0\" :cy=\"newMemory.position.y\" fill=\"#FA5E2D\" />\n      <!--<text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y - 5)\">Click to add</text>-->\n      <text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y)\">{{getRoughDate(newMemory.date)}}</text>\n    </g>\n\n    <g class=\"overlay\" v-if=\"options.overlay\">\n      <rect x=\"0\" y=\"0\" :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" fill=\"black\" opacity=\".5\" pointer-events=\"none\"/>\n      <g v-if=\"currentMemory\">\n\n        <circle\n          r=20\n          :cx=\"currentMemory.x\"\n          :cy=\"currentMemory.y\"\n          fill=\"#FA5E2D\" />\n\n        <path\n          :d=\"currentMemory.connector\"\n          stroke-width=\"2\"\n          fill=\"none\"\n          stroke=\"#FA5E2D\"/>\n\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport * as d3 from 'd3'\n//import {annotation, annotationCallout} from \"d3-svg-annotation\"\nimport lines from './lines'\n\nexport default {\n  components: {\n    lines,\n  },\n  data () {\n    return {\n      parseDate: d3.utcParse(\"%Y-%m-%d\"),\n      formatDate: d3.timeFormat(\"%Y-%m-%d\"),\n      lineGenerator: d3.line().x(d => d.x).y(d => d.y).curve(d3.curveBasis),\n      mounted: false,\n      force: null,\n      opacity: 0.8, //circle opacity when not hovered\n      forceDistance: 8, //distance of reactions to line\n      currentMemory: null, //when currently displaying a memory, pick the right one to highlight\n      newMemory: {\n        date: null,\n        show: false,\n        position: {x: -100, y: -100}, //start out of sight\n      },\n    }\n  },\n\n  props: {\n    options: Object,\n    hashtag: String,\n    cases: Array,\n    memories: Array,\n    datePicker: Boolean,\n\n  },\n\n  computed: {\n    parsedCases: function() {\n      return this.cases.map((c) => {\n        return {\n          dateString: c.d,\n          date: this.parseDate(c.d),\n          value: c.v,\n        }\n      })\n    },\n\n    scales: function() {\n      if(!this.parsedCases && this.memories) return null\n\n      let yDomain = [0,d3.max([50,d3.max(this.parsedCases, d=>d.value)])] //minimum of 50 cases to have a somewhat consistent layout\n      let xDomain = d3.extent(this.parsedCases, d=>d.date)\n      let radiusDomain = d3.extent(this.memories, d=>d.weight)\n\n      let x = d3.scaleTime().domain(xDomain).range([this.options.dimensions.left,this.options.dimensions.width-this.options.dimensions.right])\n      let y = d3.scaleLinear().domain(yDomain).range([this.options.dimensions.height-this.options.dimensions.bottom-this.options.dimensions.top,this.options.dimensions.top])\n      let radius = d3.scaleLinear().domain(radiusDomain).range([2,6])\n      \n      return {x: x, y: y, radius: radius}\n    },\n\n    parsedMemories: function() {\n      if(!this.memories) return null\n\n      this.scales //mention to force recomputation if dimensions change\n\n      return this.memories.map((memory,i) => {\n        let sign = (i%2) ? 1 : -1\n        memory.Date = this.parseDate(memory.date)\n        memory.x = this.scales.x(memory.Date)\n        memory.value = this.getLineElement(memory.date).value\n        memory.y = this.scales.y(memory.value) + this.forceDistance * sign\n        memory.radius = this.scales.radius(memory.weight)\n        memory.hashtag = (memory.comment.match(/#[a-z]+/gi)) ? (memory.comment.match(/#[a-z]+/gi))[0] : null \n\n        return memory\n      })\n    },\n\n    //generate force directed hashtags of X most weightened labels\n    hashtagLabels() {\n      if(!this.memories) return null\n      this.scales //mention to force recomputation if dimensions change\n\n      let nodes = []\n      let links = [] //\n\n      let memoriesWithTags = this.memories.filter(memory => memory.hashtag && !memory.inactive) //all active memories that have hashtags\n      \n      let latestHashtag = [...memoriesWithTags].sort((a,b) => b.Date - a.Date)[0] //the latest memory that has a hashtag\n      let selectedTags = memoriesWithTags.sort((a,b) => b.weight - a.weight).slice(0,10) //the X most weightened labels\n      selectedTags.push(latestHashtag) //the newest one (to put them into the view)\n\n      selectedTags.forEach((memory,i) => { //create node-link data\n          nodes.push({type: \"circle\", fx: memory.x, fy: memory.y}) //origin\n          nodes.push({type: \"label\", text: memory.hashtag}) //target\n          links.push({source: i*2, target: i*2+1}) //link the two\n        })\n\n        var simulation = d3.forceSimulation(nodes) //generate force directed simulation\n        .force('charge', d3.forceManyBody().strength(-0))\n        .force('link', d3.forceLink().links(links))\n        //.force('forceY', d3.forceY())\n        .force('collide', d3.forceCollide(node => {return (node.text) ? node.text.length * 2 : 50}))\n\n        for(let i = 0; i <= 200; i++) {\n          simulation.tick()\n        }\n\n        links.forEach(link => {\n          link.target.anchor = (link.target.x > link.source.x) ? \"start\" : \"end\"\n        })\n      return links\n\n    },\n  },\n\n  watch: {\n    parsedMemories: function(memories) {\n      this.releaseTheBees(memories)\n   },\n\n    hashtag: function(newHashtag){\n      if(!this.memories) return null\n      this.memories.forEach((memory,i) => {\n        if(newHashtag && !memory.comment.includes(newHashtag)) {\n          Vue.set(this.memories[i],'inactive',true)\n        } else {\n          Vue.set(this.memories[i],'inactive',false)\n        }\n      })\n    },\n\n    memories: function(arr) { //show circle on overlay after beeswarm changed\n      let c = arr.filter(e=>e.active)[0]\n      if(c) {\n        this.currentMemory = c\n         this.currentMemory.connector = `\n          M${c.x} ${c.y}\n          Q${(this.options.dimensions.width/2)} ${c.y}\n          ${(this.options.dimensions.width/2)} ${(10)}`;\n      }\n    }\n  },\n\n  async mounted() {\n    this.releaseTheBees(this.memories)\n    document.addEventListener('mousemove', this.onMouseMove)\n    this.mounted = true;\n  },\n\n  methods: {\n    releaseTheBees: function(memories) {\n      \n      this.force = d3.forceSimulation(memories)\n      .force('forceX', d3.forceX(memory => memory.x).strength(.1))\n      .force('forceY', d3.forceY(memory => memory.y).strength(.1))\n      .force('collide', d3.forceCollide(d => d.radius + .5))\n\n      for(let i = 0; i <= 20; i++) {\n        this.force.tick()\n      }\n    },\n\n    hover: function(memory,event) { //hovering circles\n      if(!this.datePicker) {  //disable hover when memory adding is in progress\n        let r = 10\n        let opacity = 1\n        if(event.type == 'mouseout') {\n          r = memory.weight\n          opacity = this.opacity\n       }\n       d3.select(event.target).transition(\"50\").attr(\"r\",r).attr(\"opacity\",opacity)\n      }\n    },\n\n    getLineElement: function(dateString) {\n      let valueOnMemoryDate = this.parsedCases.find(c => dateString == c.dateString)\n      return valueOnMemoryDate ? valueOnMemoryDate : null\n    },\n\n    getLineSegment: function(startDate,endDate) {\n      startDate = (typeof startDate === 'string') ? this.parseDate(startDate) : startDate\n      endDate = (typeof endDate === 'string') ? this.parseDate(endDate) : endDate\n      let segment = this.parsedCases.filter(c => //get parts of the caseLine that match current dates\n            (c.date < endDate && c.date > startDate) //forward movement\n            || (c.date > endDate && c.date < startDate) //backward movement\n          )\n      return segment\n    },\n\n    getRoughDate: function(date) {\n      if(!date) return null\n      \n      let rough = \"Late\"\n      if(date.getDate() <= 20) rough = \"Mid\"\n      if(date.getDate() <= 10) rough = \"Early\"\n      let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][date.getMonth()]\n        \n      return rough+\" \"+month\n    },\n\n    onMouseMove: function(event) { //follow line\n      if(this.datePicker) {\n        if(event.clientX > this.scales.x.range()[0] && event.clientX < this.scales.x.range()[1]) { //check whether we are moving within vis boundaries to avoid errors\n          let date = this.scales.x.invert(event.clientX)\n          let dateString = this.formatDate(date)\n          let value = this.scales.y(this.getLineElement(dateString).value)\n          Vue.set(this.newMemory,'date',date) //also move circle\n          Vue.set(this.newMemory.position,'x',event.clientX) //also move circle\n          Vue.set(this.newMemory.position,'y',value)\n        }\n      }\n    },\n  },\n\n  /*updated: function() {\n    console.log(\"foo\")\n      this.force.tick()\n  },*/\n}\n</script>\n\n<style scoped>\n.datePicker {\n  cursor: pointer;\n}\n\n.datePicker text {\n  font-size: 12px;\n  pointer-events: none;\n}\n\ncircle.inactive {\n  opacity: .2 !important;\n  fill: grey !important;\n  pointer-events: none;\n}\n\n.datePicker text.strong {\n  font-weight: bold;\n}\n</style>"],"sourceRoot":"src/components"}]}