{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/vis.vue","mtime":1615543989773},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <svg :width=\"options.dimensions.width\" :height=\"options.dimensions.height\">\n    \n    <filter id=\"blurMe\">\n      <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"1\" />\n    </filter>\n    \n    <g class=\"axis xAxis\" v-axis:x=\"scales\" :transform=\"`translate(0,${options.dimensions.height-options.dimensions.top-options.dimensions.bottom+10})`\"></g>\n    <g class=\"axis yAxis\" v-axis:y=\"scales\" :transform=\"`translate(${options.dimensions.width-options.dimensions.right})`\"></g>\n\n    <path\n      :d=\"caseLine\"\n      stroke-width=\"3\"\n      stroke-linejoin=\"round\" \n      fill=\"none\"\n      stroke=\"black\"/>\n\n    <g class=\"memories\"  transform=\"translate(0,0)\"> <!-- can go to component, actually.... -->\n      <g v-if=\"beeswarm\">\n        <g v-for=\"memory, j in beeswarm.filter((e,i) => i < options.progress)\" :key=\"j\">\n          <circle\n          \n            :cx=\"memory.x\"\n            :cy=\"memory.y\"\n            :class=\"{inactive: memory.inactive}\"\n            :r=\"memory.radius\"\n            fill=\"#FA5E2D\"\n            :filter=\"(options.overlay) ? 'url(#blurMe)' : ''\"\n            :opacity=\"opacity\"\n\n            @click=\"$emit('showMemory',memory)\"\n            @mouseover=\"hover(memory,$event)\"\n            @mouseout=\"hover(memory,$event)\" />\n\n         </g><!-- circleMemories </g>-->\n      </g>\n    </g>\n\n\n    <g class=\"datePicker\" @click=\"$emit('toggleForm', formatDate(newMemory.date))\"\n     v-if=\"datePicker\"\n     :transform=\"`translate(${newMemory.position.x},0)`\"> <!-- can go to own component -->\n      <line y1=\"0\" :y2=\"options.dimensions.height\" x1=\"0\" x2=\"0\" stroke=\"#FA5E2D\" stroke-width=\"2px\"  stroke-dasharray=\"0\"/>\n      <circle r=\"40\" cx=\"0\" :cy=\"newMemory.position.y\" fill=\"#FA5E2D\" />\n      <text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y)\">{{getRoughDate(newMemory.date)}}</text>\n    </g>\n\n    <g class=\"overlay\" v-if=\"options.overlay\">\n      <rect x=\"0\" y=\"0\" :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" fill=\"black\" opacity=\".5\" pointer-events=\"none\"/>\n      <g v-if=\"currentMemory\">\n        <circle\n          r=20\n          :cx=\"currentMemory.x\"\n          :cy=\"currentMemory.y\"\n          fill=\"#FA5E2D\" />\n        <path\n          :d=\"currentMemory.connector\"\n          stroke-width=\"2\"\n          fill=\"none\"\n          stroke=\"#FA5E2D\"/>\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      parseDate: d3.utcParse(\"%Y-%m-%d\"),\n      formatDate: d3.timeFormat(\"%Y-%m-%d\"),\n      lineGenerator: d3.line().x(d => d.x).y(d => d.y),//.curve(d3.curveBasis),\n      mounted: false,\n      beeswarm: null,\n      opacity: 0.7, //circle opacity when not hovered\n      forceDistance: 10, //distance of reactions to line\n      currentMemory: null, //when currently displaying a memory, pick the right one to highlight\n      newMemory: {\n        date: null,\n        show: false,\n        position: {x: -100, y: -100}, //start out of sight\n      },\n    }\n  },\n\n  props: {\n    options: Object,\n    hashtag: String,\n    cases: Array,\n    memories: Array,\n    datePicker: Boolean,\n  },\n\n  computed: {\n    parsedCases: function() { //take cases from property, parse and assign readable keys\n      return this.cases.map((c) => {\n        return {\n          dateString: c.d,\n          date: this.parseDate(c.d),\n          value: c.v,\n          //slope: (i>5) ? c.v - this.cases[i-6].v : 0 //helps computing the beeswarm's distance\n        }\n      })\n    },\n\n    scales: function() {\n      if(!this.parsedCases && this.memories) return null\n\n      let yDomain = [0,d3.max([50,d3.max(this.parsedCases, d=>d.value)])] //minimum of 50 cases to have a somewhat consistent layout\n      let xDomain = d3.extent(this.parsedCases, d=>d.date)\n      let radiusDomain = d3.extent(this.memories, d=>d.weight)\n\n      let x = d3.scaleTime().domain(xDomain).range([this.options.dimensions.left,this.options.dimensions.width-this.options.dimensions.right])\n      let y = d3.scaleLinear().domain(yDomain).range([this.options.dimensions.height-this.options.dimensions.bottom-this.options.dimensions.top,this.options.dimensions.top])\n      let radius = d3.scaleLinear().domain(radiusDomain).range([3,4])\n      \n      return {x: x, y: y, radius: radius}\n    },\n\n    caseLine: function() {\n      if(!this.scales) return false\n      let arr = this.parsedCases.map(c => { \n        c.x = this.scales.x(c.date)\n        c.y = this.scales.y(c.value)\n        return c;\n      })\n    return this.lineGenerator(arr)\n  },\n\n    circleMemories: function() {\n      if(!this.memories && !this.scales) return null\n      let arr = this.memories //create new arr, because reactivity (maybe, dunno, did not work without it)\n      \n      //let slopeDomain = d3.extent(this.parsedCases, d=>d.slope)\n      \n\n      if(arr.length > 0) { //compute x/y coordinates for all memories (before turning them into a beeswarm)\n        arr.forEach((memory,i) => {\n          memory.slope = (i>5)\n          console.log(memory, i)\n        })\n\n        //arr = arr.filter(memory => memory.date == memory.enddate) //only get memories that are only one day long\n        arr.forEach((memory,i)=> {\n          i\n          //let slope = this.getLineElement(memory.date).slope\n          //let maxSlope = slope >= 0 ? slopeDomain[1] : slopeDomain [0] //if slope is negative, use negativ max to compute distance\n          //let sign = (i%2) ? -1 : 1 //split into a line above and one below\n          //let changeY = sign * (Math.abs(maxSlope) -  Math.abs(slope)) * (1/this.forceDistance) //change on y axis decreases as slope gets higher\n          //let changeX = sign * (maxSlope  - slope) * (1/this.forceDistance) //change on y axis decreases as slope gets higher\n          memory.y = this.scales.y(this.getLineElement(memory.date).value)// + changeY\n          memory.x = this.scales.x(this.parseDate(memory.date))// + changeX\n          memory.radius = this.scales.radius(memory.weight)\n        })\n      }\n      //arr.forEach(m=>console.log(m.hidden))\n      //console.log(arr.filter(m=>m.active))\n      return arr\n      \n    },\n},\n\nwatch: {\n  circleMemories: function(circleMemories) {\n     let force = d3.forceSimulation(circleMemories)\n      .force('forceX', d3.forceX(memory => memory.x).strength(.1))\n      .force('forceY', d3.forceY(memory => memory.y).strength(.1))\n      .force('collide', d3.forceCollide(d => d.radius + .5))\n    for (let i = 0; i < 100; ++i) {\n      force.tick()\n    }\n    \n    this.beeswarm = force.nodes()\n  },\n\n  hashtag: function(newHashtag){\n    if(!this.beeswarm) return null\n    this.beeswarm.forEach((memory,i) => {\n      if(newHashtag && !memory.comment.includes(newHashtag)) {\n        Vue.set(this.beeswarm[i],'inactive',true)\n      } else {\n        Vue.set(this.beeswarm[i],'inactive',false)\n      }\n    })\n  },\n\n  beeswarm: function(arr) { //show circle on overlay after beeswarm changed\n    let c = arr.filter(e=>e.active)[0]\n    if(c) {\n      this.currentMemory = c\n       this.currentMemory.connector = `\n        M${c.x} ${c.y}\n        Q${(this.options.dimensions.width/2)} ${c.y}\n        ${(this.options.dimensions.width/2)} ${(20)}`;\n    }\n  }\n},\n\n  async mounted() {\n    this.mounted = true;\n    document.addEventListener('mousemove', this.onMouseMove)\n    /*document.addEventListener('mousedown', this.onMouseDown)\n    document.addEventListener('mouseup', this.onMouseUp)*/\n  },\n\n  methods: {\n    hover: function(memory,event) { //hovering circles\n      if(!this.datePicker) {  //disable hover when memory adding is in progress\n        let r = 10\n        let opacity = 1\n        if(event.type == 'mouseout') {\n          r = memory.weight\n          opacity = this.opacity\n       }\n       d3.select(event.target).transition(\"50\").attr(\"r\",r).attr(\"opacity\",opacity)\n      }\n    },\n\n    getLineElement: function(dateString) {\n      let valueOnMemoryDate = this.parsedCases.find(c => dateString == c.dateString)\n      return valueOnMemoryDate ? valueOnMemoryDate : null\n    },\n\n    getLineSegment: function(startDate,endDate) {\n      startDate = (typeof startDate === 'string') ? this.parseDate(startDate) : startDate\n      endDate = (typeof endDate === 'string') ? this.parseDate(endDate) : endDate\n      let segment = this.parsedCases.filter(c => //get parts of the caseLine that match current dates\n            (c.date < endDate && c.date > startDate) //forward movement\n            || (c.date > endDate && c.date < startDate) //backward movement\n          )\n      return segment\n    },\n\n    getRoughDate: function(date) {\n      if(!date) return null\n      \n      let rough = \"Late\"\n      if(date.getDate() < 20) rough = \"Mid\"\n      if(date.getDate() < 10) rough = \"Early\"\n      let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][date.getMonth()]\n        \n      return rough+\" \"+month\n    },\n\n    onMouseMove: function(event) { //follow line\n      if(this.datePicker) {\n        if(event.clientX > this.scales.x.range()[0] && event.clientX < this.scales.x.range()[1]) { //check whether we are moving within vis boundaries to avoid errors\n          let date = this.scales.x.invert(event.clientX)\n          let dateString = this.formatDate(date)\n          let value = this.scales.y(this.getLineElement(dateString).value)\n          Vue.set(this.newMemory,'date',date) //also move circle\n          Vue.set(this.newMemory.position,'x',event.clientX) //also move circle\n          Vue.set(this.newMemory.position,'y',value)\n        }\n      }\n    },\n  },\n\n  directives: { //axis computation\n    axis(el, binding) {\n      let axis = d3.select(el)\n      switch(binding.arg) {\n        case \"x\":\n          axis.call(d3\n            .axisBottom(binding.value.x)\n            .ticks(d3.timeMonth)\n            .tickFormat(d3.timeFormat(\"%b\"))\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick text\")\n            .style(\"text-anchor\", \"end\")\n            .style(\"text-transform\", \"UPPERCASE\")\n            .style(\"opacity\", .3)\n          break;\n        case \"y\":\n          axis.call(d3\n            .axisRight(binding.value.y)\n            .tickSize(-1000)\n            .ticks(5)\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"opacity\",.05)\n          axis.selectAll(\".tick text\").attr(\"opacity\",.3)\n          break;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.datePicker {\n  cursor: pointer;\n}\n\n.datePicker text {\n  font-size: 12px;\n  pointer-events: none;\n}\n\ncircle.inactive {\n  opacity: .2 !important;\n  fill: grey !important;\n  pointer-events: none;\n}\n\n.datePicker text.strong {\n  font-weight: bold;\n}\n</style>\n"],"sourceRoot":"src/components"}]}