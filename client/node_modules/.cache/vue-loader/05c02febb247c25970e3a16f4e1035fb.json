{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/vis.vue?vue&type=style&index=0&id=91b57380&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/vis.vue","mtime":1614378041665},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8qLnNsaWRlLWVudGVyLW1vdmUgewogIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxczsKfSovCiAgLmdyaWRMaW5lcyB0ZXh0IHsKICAgIGZvbnQtc2l6ZTogN3B0OwogICAgZmlsbDogYmxhY2s7CiAgICBvcGFjaXR5OiAuMjsKICB9Cg=="},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg :width=\"dimensions.width\" :height=\"dimensions.height\" v-if=\"mounted\" z-index=\"5\">\n    \n    <filter id=\"blurMe\">\n      <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"1\" />\n    </filter>\n    \n    <g class=\"axis xAxis\" v-axis:x=\"scales\" :transform=\"`translate(0,${dimensions.height-dimensions.top-dimensions.bottom+10})`\"></g>\n    <g class=\"axis yAxis\" v-axis:y=\"scales\" :transform=\"`translate(${dimensions.width-dimensions.right})`\"></g>\n\n    <path\n      :d=\"caseLine\"\n      stroke-width=\"3\"\n      fill=\"none\"\n      stroke=\"black\"/>\n\n    <g class=\"memories\" v-if=\"beeswarm\" transform=\"translate(0,0)\">\n      <g v-for=\"memory, j in beeswarm\" :key=\"j\">\n        <circle\n          :cx=\"memory.x\"\n          :cy=\"memory.y\"\n          :opacity=\"opacity\"\n          :r=\"memory.weight\"\n          fill=\"#FA5E2D\"\n          :filter=\"overlay ? 'url(#blurMe)' : ''\"\n          @click=\"$emit('showMemory',memory)\"\n          @mouseover=\"hover(memory,$event)\"\n          @mouseout=\"hover(memory,$event)\" />\n\n        <!--<text\n          :x=\"memory.x\"\n          :y=\"memory.y\"\n          fill=\"#FA5E2D\"\n          @click=\"$emit('showMemory',memory)\"\n          @mouseover=\"hover(memory,$event)\"\n          @mouseout=\"hover(memory,$event)\">{{memory.comment}}\n          </text>-->\n        </g>\n    </g>\n\n    <g class=\"dateSelector\" @click=\"toggleForm($event)\" v-if=\"dateSelector\" :transform=\"`translate(${newMemory.x},${newMemory.y})`\">\n      <circle r=\"25\" cx=\"0\" cy=\"0\" fill=\"#FA5E2D\"  />\n      <path d=\"M6 0H9V6H15V9H9V15H6V9H0V6H6V0Z\" fill=\"white\" transform=\"translate(-7,-15)\" />\n      <text v-if=\"newMemory.date\" x=\"0\" y=\"10\" text-anchor=\"middle\">{{formatDate(newMemory.date)}}</text>\n    </g>\n\n    <g class=\"overlay\" v-if=\"overlay\">\n      <rect x=\"0\" y=\"0\" :width=\"dimensions.width\" :height=\"dimensions.height\" fill=\"black\" opacity=\".5\" pointer-events=\"none\"/>\n      <g v-if=\"currentMemory\">\n\n        <circle\n          r=20\n          :cx=\"currentMemory.x\"\n          :cy=\"currentMemory.y\"\n          fill=\"#FA5E2D\" />\n\n        <!--<line\n          :x1=\"currentMemory.x\"\n          :y1=\"currentMemory.y\"\n          :x2=\"(dimensions.width/2)\"\n          :y2=\"(dimensions.height/2)\"\n          stroke-width=\"2\"\n          stroke=\"#FA5E2D\"/>-->\n        <path\n          :d=\"currentMemory.connector\"\n          stroke-width=\"2\"\n          fill=\"none\"\n          stroke=\"#FA5E2D\"/>\n\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport Vue from 'vue'\n\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      parseDate: d3.utcParse(\"%Y-%m-%d\"),\n      formatDate: d3.timeFormat(\"%Y-%m-%d\"),\n      mounted: false,\n      opacity: 0.7, //circle opacity when not hovered\n      forceDistance: 5, //distance of reactions to line\n      linePosition: [0,0], //x and y of line overlay to add new memories\n      currentMemory: null, //when currently displaying a memory, pick the right one to highlight\n      newMemory: {\n        date: null,\n        show: false,\n        x: 0,\n        y: 0,\n      },\n      //time: 1,\n    }\n  },\n\n  props: {\n    dimensions: Object,\n    cases: Array,\n    memories: Array,\n    dateSelector: Boolean,\n    overlay: Boolean,\n\n  },\n\n  computed: {\n    parsedCases: function() {\n      return this.cases.map(c => {\n        return {\n          dateString: c.d,\n          date: this.parseDate(c.d),\n          value: c.v\n        }\n      })\n    },\n\n\n    scales: function() {\n      if(!this.parsedCases) return null\n\n      let yDomain = [0,d3.max([50,d3.max(this.parsedCases, d=>d.value)])] //minimum of 50 cases to have a somewhat consistent layout\n      let xDomain = d3.extent(this.parsedCases, d=>d.date)\n      let x = d3.scaleTime().domain(xDomain).range([this.dimensions.left,this.dimensions.width-this.dimensions.right])\n      let y = d3.scaleLinear().domain(yDomain).range([this.dimensions.height-this.dimensions.bottom-this.dimensions.top,this.dimensions.top])\n      \n      return {x: x, y: y}\n    },\n\n    computedMemories: function() {\n      if(!this.memories && !this.scales) return null\n      let arr = this.memories\n      if(arr && arr.length > 0) {\n        arr.forEach(memory=> {\n          memory.y = this.scales.y(this.getYforDate(memory.date))\n          memory.x = this.scales.x(this.parseDate(memory.date))\n        })\n      }\n      //if(this.dateSelector) { arr[this.memories.length] = this.newMemory\n\n      return arr\n    },\n\n    /*xyMapping: function() { //mapping Dates (string) to y-positions to more easily compute linePosition and beeswarm start positions\n      if(!this.scales) return null\n      let obj = {}\n      this.parsedCases.forEach(c => {\n        obj[c.dateString] = {\n          x: this.scales.x(c.date)\n          y: this.scales.y(c[this.metric])\n        }\n      })\n\n      return obj\n    },*/\n\n    beeswarm: function(){\n      if(!this.computedMemories) return null\n\n      let force = d3.forceSimulation(this.computedMemories)\n       .force('forceX', d3.forceX((memory,i) => memory.x + (-this.forceDistance + (i%2)*(this.forceDistance * 2)) ).strength(.1))\n       .force('forceY', d3.forceY((memory,i) => memory.y + (-this.forceDistance + (i%2)*(this.forceDistance * 2))).strength(.1))\n       .force('collide', d3.forceCollide(d => d.weight))\n     for (let i = 0; i < 10; ++i) {\n       force.tick()\n     }\n\n     return force.nodes()\n   },\n\n  /* gridLines: function() {\n     if(!this.scales) return false\n     let arr = []\n     for (let i = this.scales.y.domain()[0]; i<= this.scales.y.domain()[1]; i++) { //go from the bottom of your y-axis to the top\n       if(i%50 == 0 && i != 0) { //find every valuable thats divisible by 50\n         arr.push({ //change it's position in the gridLine array (for dynamic change)\n           value: i,\n           y: this.scales.y(i)\n         })\n       }\n     }\n     return arr\n   },*/\n\n\n    caseLine: function() {\n      if(!this.scales) return false\n\n      const lineGenerator = d3.line()\n        .curve(d3.curveBasis)\n        .x(d => this.scales.x(d.date))\n        .y(d => this.scales.y(d.value))\n\n    return lineGenerator(this.parsedCases)\n  },\n},\n\nwatch: {\n  beeswarm: function(arr) { //show circle on overlay after beeswarm changed\n    let c = arr.filter(e=>e.active)[0]\n    if(c) {\n      this.currentMemory = c\n       this.currentMemory.connector = `\n        M${c.x} ${c.y}\n        Q${(this.dimensions.width/2)} ${c.y}\n        ${(this.dimensions.width/2)} ${(this.dimensions.height/2)}`;\n    }\n  }\n},\n\n\n  async mounted() {\n    this.mounted = true;\n    document.addEventListener('mousemove', this.onMouseMove)\n\n    /*let obj = {}\n    d3.csv('worldbank-population.csv')\n    .then((csv) => {\n      csv.forEach(data => {\n        obj[data.Country] = {Code: data.Code, Population: data.Population}\n      })\n      console.log(obj)\n    })*/\n  },\n\n  methods: {\n    hover: function(memory,event) { //hovering circles\n      if(!this.dateSelector) {  //disable hover when memory adding is in progress\n        let r = 10\n        let opacity = 1\n        if(event.type == 'mouseout') {\n          r = memory.weight\n          opacity = this.opacity\n       }\n       d3.select(event.target).transition(\"50\").attr(\"r\",r).attr(\"opacity\",opacity)\n      }\n    },\n\n    getYforDate: function(dateString) {\n      let valueOnMemoryDate = this.parsedCases.find(c => dateString == c.dateString)\n      return valueOnMemoryDate ? valueOnMemoryDate.value : 0\n    },\n\n    \n\n    onMouseMove: function(event) { //follow line\n      if(this.dateSelector) {\n        let exactDate = this.scales.x.invert(event.clientX)\n        let dateString = this.formatDate(exactDate)\n\n        //let value = this.parsedCases.find(c => c.dateString == dateString).value\n        \n        Vue.set(this.newMemory,'date',dateString)\n        Vue.set(this.newMemory,'x',event.clientX)\n        Vue.set(this.newMemory,'y',this.scales.y(this.getYforDate(dateString)))\n\n        //let hoveredDay = this.formatDate(this.newMemoryDate)\n        //let casesOnHoveredDay = this.parsedCases.find(c => c.dateString == hoveredDay).value\n        //let y = this.scales.y(casesOnHoveredDay)\n        //this.linePosition = [event.clientX,y]\n\n        /*Vue.set(\n          this.computedMemories.array[this.computedMemories.length-1],\n          'date',\n          this.formatDate(this.newMemoryDate))\n        console.log(this.computedMemories.arr[this.computedMemories.length-1].date)*/\n      }\n    },\n  },\n\n  directives: { //axis computation\n    axis(el, binding) {\n      let axis = d3.select(el)\n      switch(binding.arg) {\n        case \"x\":\n          axis.call(d3\n            .axisBottom(binding.value.x)\n            .ticks(d3.timeMonth)\n            .tickFormat(d3.timeFormat(\"%b\"))\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick text\")\n            .style(\"text-anchor\", \"end\")\n            .style(\"text-transform\", \"UPPERCASE\")\n            .style(\"opacity\", .3)\n          break;\n        case \"y\":\n          axis.call(d3\n            .axisRight(binding.value.y)\n            .tickSize(-1000)\n            .ticks(5)\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"opacity\",.05)\n          axis.selectAll(\".tick text\").attr(\"opacity\",.3)\n          break;\n      }\n\n    }\n  }\n}\n</script>\n\n<style scoped>\n/*.slide-enter-move {\n  transition: transform 1s;\n}*/\n  .gridLines text {\n    font-size: 7pt;\n    fill: black;\n    opacity: .2;\n  }\n</style>\n"]}]}