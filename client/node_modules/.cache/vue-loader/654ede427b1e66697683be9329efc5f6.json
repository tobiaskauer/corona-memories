{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/App.vue?vue&type=style&index=1&id=7ba5bd90&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/App.vue","mtime":1615913315420},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvK1NsYWI6d2dodEA0MDA7OTAwJmRpc3BsYXk9c3dhcCcpOwoKLmludHJvV3JhcHBlciwgLmV4cGxvcmF0aW9uV3JhcHBlciwgLmFuaW1hdG9yV3JhcHBlciAgewogIC8vYm9yZGVyOiAxcHggZG90dGVkIGJsYWNrOwogIGhlaWdodDogMTAwdmg7CiAgcGFkZGluZy10b3A6IDEwcHg7Cn0KCi5zY3JvbGxhbWEgewogIHdpZHRoOiA0MCU7CiAgcGFkZGluZzogMCAwcHggNTBweCAzMHB4OwogIG1pbi13aWR0aDogMjAwcHg7CiAgbWF4LXdpZHRoOiA0MDBweDsKICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2VyaWY7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KCmJ1dHRvbiwgLnYtaW5wdXQgewogIHBvaW50ZXItZXZlbnRzOiBhbGw7Cn0KCmgxewogIG1hcmdpbjogMzBweCAwIDEwcHggMHB4OwogIC8vaGVpZ2h0OiAxMDBweDsKICAvL3Bvc2l0aW9uOiBmaXhlZDsKICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2VyaWY7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LXNpemU6IDQwcHg7CiAgY29sb3I6ICNGQTVFMkQ7CiAgbGluZS1oZWlnaHQ6IDMwcHg7Cn0KCi5jYWxsVG9BY3Rpb25XcmFwcGVyIHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiAxMHB4OwogIHJpZ2h0OiAxMHB4Owp9CgpoMSBzcGFuewogIGZvbnQtd2VpZ2h0OiA5MDA7Cn0KCnAgewogIGZvbnQtZmFtaWx5OiAnUm9ib3RvIFNsYWInLCBzZXJpZjsKICBmb250LXdlaWdodDogNDAwOwp9CgpwLmxhcmdlciB7CiAgZm9udC1zaXplOiAxLjJlbTsKfQoKcC5zbWFsbGVyIHsKICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsKICBjb2xvcjogcmdiYSgxMDAsMTAwLDEwMCk7CiAgZm9udC1zaXplOiA5cHg7CiAgbGluZS1oZWlnaHQ6IDEwcHg7Cn0KCi52aXNXcmFwcGVyIHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgd2lkdGg6IDEwMCU7CiAgbGVmdDogMDsKICBoZWlnaHQ6IDEwMCU7CiAgcG9pbnRlci1ldmVudHM6IGFsbDsKfQoKLmhhc2h0YWdzIHsKICBwb2ludGVyLWV2ZW50czogYWxsOwogIGxpbmUtaGVpZ2h0OiAxMDAlOwp9CgoKI2FwcCB7CiAgYmFja2dyb3VuZDogI0ZGRUJDNjsKICBtaW4taGVpZ2h0OiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsSA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app>\n    <template v-if=\"cases && memories && countries && mounted\">\n    \n    <Scrollama\n      class=\"scrollama\"\n      :progress=\"true\"\n      @step-enter=\"stepEnterHandler\"\n      @step-progress=\"stepProgressHandler\"\n    >\n\n      <!-- display intro-text and consent form -->\n      <div slot=\"graphic\" ref=\"vis\" class=\"visWrapper\"> \n        <vis\n          :cases=\"cases\"\n          :memories=\"memories\"\n          :options=\"visOptions\"\n          :datePicker=\"newMemory.datepicker\"\n          :hashtag=\"activeHashtag\"\n          @toggleForm=\"toggleForm($event)\"\n          @showMemory=\"showMemory\" />\n      </div>\n\n        <div class=\"introWrapper\" data-step=\"1\">  \n          <h1>corona<br /><span>memories</span></h1>\n          <p class=\"larger\"> Numbers do not tell stories. <strong>People do.</strong></p>\n          <p>Since the start of the pandemic <strong>about <counter /> days</strong> ago, we are confronted with charts about new cases or even deaths. What are the human stories behind the numbers?</p>\n          <p class=\"smaller\">The research is conducted by Tobias Kauer (University of Edinburgh), Benjamin Bach (University of Edinburgh), and Marian Dörk (Potsdam University of Applied Sciences). It has been granted approval by the ethics committee. By clicking the button, you indicate that you are a speaker of English and at least 18 years old. You have read the <a href=\"#\">information letter</a> and you voluntarily agree to participate, and understand you can stop your participation at any time. You agree that your anonymous data may be kept permanently in Edinburgh University archived and may be used by qualified researchers for teaching and research purposes.</p>\n            <v-btn color=\"primary\" outlined @click=\"giveConsent\">\n              <v-icon small>mdi-check-circle</v-icon>\n             I agree, show me\n            </v-btn>\n        </div>\n\n        <!-- wrapper that controls progress of appearing memory bubbles -->\n        <div class=\"animatorWrapper\" data-step=\"2\"></div> \n\n        <!-- display exploration controls and trigger submission form -->\n        <div v-if=\"consent\" id=\"target\" class=\"explorationWrapper\" data-step=\"3\"> \n          <p><strong>Click the bubbles to read people’s stories.</strong><br />Select countries and/or hashtags to filter.</p>\n          <v-select\n            :items=\"countries\"\n            v-model=\"currentCountry\"\n            label=\"Your country\"\n            outlined />\n          <p v-if=\"hashtags\" class=\"hashtags\">\n            <v-chip\n              v-for=\"(hashtag, i) in hashtags.filter((e,i) => i<10).sort((a,b) => a.tag.localeCompare(b.tag))\"\n              small\n              color=\"primary\"\n              :outlined=\"(activeHashtag != hashtag.tag)\"\n              :style=\"{fontSize: hashtag.size+'px', margin: '2px'}\"\n              :key=\"'hashtag-'+i\"\n              @click=\"filterMemories(hashtag.tag)\">{{hashtag.tag}} </v-chip>\n          </p>\n        </div>\n    </Scrollama>\n\n    <!-- call to action button -->\n    <div class=\"callToActionWrapper\" v-if=\"consent && currentStepId > 1\">\n      <v-btn color=\"primary\" outlined elevation=\"2\" @click=\"toggleDatepicker\">\n        <template v-if=\"!newMemory.datepicker\">\n          <v-icon small>mdi-tooltip-plus-outline</v-icon>Add your story\n        </template>\n        <template v-else>\n          <v-icon small>mdi-close-circle-outline</v-icon>Stop adding\n        </template>\n      </v-btn>\n    </div>\n\n    <!-- submission form (default: hidden) -->\n    <div class=\"formWrapper\" v-if=\"newMemory.showForm\">\n      <memoryForm\n        :date=\"newMemory.date\"\n        :country=\"currentCountry\"\n        :countries=\"countries\"\n        :hashtags=\"hashtags\"\n        @close=\"toggleForm(false)\"/>\n    </div>\n\n    <!-- display single memory (default: hidden) -->\n    <div class=\"memoryWrapper\" v-if=\"displayMemory.display\">\n      <memoryDisplay\n        :memory=\"displayMemory.memory\"\n        @close=\"showMemory(false)\"\n        @previous=\"changeMemory('previous')\"\n        @next=\"changeMemory('next')\"/>\n    </div>\n  </template>\n\n  <!-- loading screen if not everything has loaded yet -->\n  <template v-else>\n    <v-card class=\"d-flex justify-center mb-6\" color=\"rgb(255, 0, 0, 0.0)\" elevation=\"0\" style=\"margin-top: 100px;\">\n      <v-progress-circular\n        :size=\"300\"\n        indeterminate\n       color=\"primary\"\n        >Loading ...<br />try refresing?</v-progress-circular>\n      </v-card>\n    </template>\n  </v-app>\n</template>\n\n<script>\n//get packages\nimport Vue from 'vue'\nimport AsyncComputed from 'vue-async-computed'\nVue.use(AsyncComputed)\nimport 'intersection-observer' // for cross-browser support\nimport Scrollama from 'vue-scrollama'\nimport * as d3 from 'd3'\n\n\n//get services for API connectivity\nimport caseService from '@/services/caseService'\nimport memoryService from '@/services/memoryService'\n\n//get components\nimport memoryForm from './components/memoryForm'\nimport memoryDisplay from './components/memoryDisplay'\nimport counter from './components/counter'\nimport vis from './components/vis'\n\n\nexport default {\n  name: 'App',\n  components: {\n    Scrollama,\n    memoryForm,\n    memoryDisplay,\n    counter,\n    vis\n  },\n\n  data () {\n    return {\n      mounted: false, //turns true after the first lifecycle has run (and allows to render everything in the DOM)\n      consent: true, //only start recording after people consent\n      currentStepId: 0, //what part of the page are we in?\n      countries: null, //to be filled in mounted()\n      currentCountry: \"Germany\", //to be changed via select, triggers reactivity for asyncComputed memories and cases\n      hashtags: null, //ranked list of present hashtags to be filled by watching memories\n      activeHashtag: null, //String of active hashtag (to filter memories)\n\n      visOptions: { //all settings that need to be passed to vis-component\n        dimensions: {width: 0, height: 0, top: 100, right: 100, bottom: 0, left: 100},\n        progess: 0, //count up to length of memories while scrolling\n        overlay: false, //manual SVG overlay (to display single circle on top), istead of a vuetify one\n      },\n\n      displayMemory: { //all settings that need to be passed to displayMemory-component\n        display: false, //initially, do not show a single memory \n        memory: null,\n      },\n      newMemory: { //all settings that need to be passed to the form that adds a new memory (or the step before: picking a date)\n        datepicker: false, //show circle (formerly line) that adds new dot\n        showForm: false, //show form after clicking the dot\n        date: \"\" //is set when hovering line and passed to memory form\n        //date: \"2020-02-23\" //to quicker test form\n      }\n    }\n  },\n\n  asyncComputed: {\n    async cases() {\n      return (await caseService.getCases({country: this.currentCountry, metric: \"relative_cases\"})).data //get cases from API (make this async to keep reactivity when changing country)\n    },\n    async memories() {\n      return (await memoryService.getMemories({country: this.currentCountry})).data //same as above\n    }\n  },\n\n  watch:  {\n    memories: function(memories) {\n      let tags = memories//find all hashtags\n        .map(memory => memory.comment.match(/#[a-z]+/gi))\n        .flat()\n        .filter(tag => tag) \n      let counted = tags.reduce((a, b) => (a[b] = (a[b] || 0) + 1, a), {}) //count occurence of single hashtags\n      let ranked = Object.keys(counted)\n        .map(tag => {return {tag: tag, occurences: counted[tag]}}) //turn into array\n        .sort((a,b) => b.occurences - a.occurences) //sort that array\n      \n      let scaleSize = d3.scaleLinear().domain(d3.extent(ranked,r=>r.occurences)).range([5,15]) //create scale for font sze of hashtags\n      ranked.forEach(hashtag => hashtag.size = scaleSize(hashtag.occurences)) //assign font size to each hashtag\n      this.hashtags = ranked;\n    }\n  },\n\n  created() {\n    window.addEventListener(\"resize\", this.resize); //detect resizing the window (to change svg dimensions)\n\n  },\n\n  async mounted () {\n    this.countries = (await caseService.getCountries()).data.map(e => e.country) //get countries once when mounting (no need to to this reactive)\n    this.$nextTick(() => { //when everything has loaded\n      this.resize() //get true dimensions of containers\n      this.mounted = true; //alllow to render DOM\n    })    \n },\n\n  methods: {\n    resize: function() { //get dimensions and pass to vis-component\n      Vue.set(this.visOptions.dimensions,'width',window.innerWidth) \n      Vue.set(this.visOptions.dimensions,'height',window.innerHeight)\n    },\n\n    giveConsent: function() { //by clicking the \"I agree\"-button\n      this.consent = true\n      this.$nextTick(() => { //wait until consent = true has taken effect and the DOM has rendered all objects\n        this.$vuetify.goTo(\"#target\", {duration: 2000}); //then scroll to them\n      });\n    },\n\n    showMemory: function(memory) {\n      \n      if(memory) { //is true when a memory is passed\n        Vue.set(this.memories[this.memories.findIndex(stack => stack.id == memory.id)],'active',true) //set memory active\n        Vue.set(this.displayMemory,'memory',memory)\n        Vue.set(this.displayMemory,'display',true)\n        Vue.set(this.visOptions,'overlay',true)\n      } else { //when no memory is passed\n        Vue.set(this.displayMemory,'display',false) //hide display component\n        Vue.set(this.memories[this.memories.findIndex(e => e.active)],'active',false) //find active memory, turn it back off\n        Vue.set(this.visOptions,'overlay',false) //don't show the svg overlay \n      }\n    },\n\n    changeMemory: function(direction) {\n      let currentMemoryIndex = this.memories.findIndex(e => e.active)\n      let futureMemoryIndex  //future index (when using buttons on didplay)\n        if(direction == \"next\") futureMemoryIndex = currentMemoryIndex +1 \n        if(direction == \"previous\") futureMemoryIndex = currentMemoryIndex -1 \n        if(futureMemoryIndex && this.memories[futureMemoryIndex]) { //if memory with does exist\n          Vue.set(this.displayMemory,'memory',this.memories[futureMemoryIndex])\n          Vue.set(this.memories[currentMemoryIndex],'active',false) //deactivate previously active memory \n          Vue.set(this.memories[futureMemoryIndex],'active',true) //activate now active memory \n        }\n    },\n\n    stepEnterHandler({element, direction}) {//handle scrolling from step to step\n      direction //maybe we need this later\n      switch(element.className) {\n        case \"introWrapper\": \n           Vue.set(this.visOptions,'progress',0) //math.ceil is needed elsewhere to show all memories, so let's reset counter to 0 when we scroll back to the intro\n          break\n      }\n      this.currentStepId = element.dataset.step //store current step in data\n    },\n\n    stepProgressHandler({element, progress}) { //handle scrolling with progress\n      if(element.className == \"animatorWrapper\" && this.consent) { //if visitor has consentent AND were scrolling over the animatorWrapper\n        let showElementsNumber = Math.ceil(progress * this.memories.length) //compute number of memories to show (min: 0, max: all memories)\n        Vue.set(this.visOptions,'progress',showElementsNumber) //write to reactive data\n      }\n    },\n\n    toggleDatepicker: function() {\n      let bool = !this.newMemory.datepicker\n      Vue.set(this.newMemory,'datepicker',bool)\n    },\n\n    filterMemories: function(hashtag) {\n      if(this.activeHashtag != hashtag) {\n        this.activeHashtag = hashtag\n      } else {\n        this.activeHashtag = null\n      }\n    },\n\n    debug: function(event) {\n      console.log(event)\n    },\n\n    toggleForm: function(date) { //using an own method instead of inline assignment to stay sane\n      \n      if(date) {\n        Vue.set(this.newMemory,'date',date)\n        Vue.set(this.newMemory,'datepicker',false)\n        Vue.set(this.newMemory,'showForm',true)\n        this.overlay = true\n      } else {\n        Vue.set(this.newMemory,'showForm',false)\n        this.overlay = false\n      }\n    },\n  }\n}\n</script>\n\n<style src=\"vue-scrollama/dist/vue-scrollama.css\"></style>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;900&display=swap');\n\n.introWrapper, .explorationWrapper, .animatorWrapper  {\n  //border: 1px dotted black;\n  height: 100vh;\n  padding-top: 10px;\n}\n\n.scrollama {\n  width: 40%;\n  padding: 0 0px 50px 30px;\n  min-width: 200px;\n  max-width: 400px;\n  font-family: 'Roboto Slab', serif;\n  pointer-events: none;\n}\n\nbutton, .v-input {\n  pointer-events: all;\n}\n\nh1{\n  margin: 30px 0 10px 0px;\n  //height: 100px;\n  //position: fixed;\n  font-family: 'Roboto Slab', serif;\n  font-weight: 400;\n  font-size: 40px;\n  color: #FA5E2D;\n  line-height: 30px;\n}\n\n.callToActionWrapper {\n  position: fixed;\n  top: 10px;\n  right: 10px;\n}\n\nh1 span{\n  font-weight: 900;\n}\n\np {\n  font-family: 'Roboto Slab', serif;\n  font-weight: 400;\n}\n\np.larger {\n  font-size: 1.2em;\n}\n\np.smaller {\n  font-family: sans-serif;\n  color: rgba(100,100,100);\n  font-size: 9px;\n  line-height: 10px;\n}\n\n.visWrapper {\n  position: fixed;\n  width: 100%;\n  left: 0;\n  height: 100%;\n  pointer-events: all;\n}\n\n.hashtags {\n  pointer-events: all;\n  line-height: 100%;\n}\n\n\n#app {\n  background: #FFEBC6;\n  min-height: 100%;\n  height: 100%;\n}\n</style>\n"]}]}