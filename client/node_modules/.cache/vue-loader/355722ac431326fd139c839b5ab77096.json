{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/vis.vue","mtime":1615483163571},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBWdWUgZnJvbSAndnVlJwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMycKCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIHBhcnNlRGF0ZTogZDMudXRjUGFyc2UoIiVZLSVtLSVkIiksCiAgICAgIGZvcm1hdERhdGU6IGQzLnRpbWVGb3JtYXQoIiVZLSVtLSVkIiksCiAgICAgIGxpbmVHZW5lcmF0b3I6IGQzLmxpbmUoKS54KGQgPT4gZC54KS55KGQgPT4gZC55KS5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKSwKICAgICAgbW91bnRlZDogZmFsc2UsCiAgICAgIGJlZXN3YXJtOiBudWxsLAogICAgICBvcGFjaXR5OiAwLjcsIC8vY2lyY2xlIG9wYWNpdHkgd2hlbiBub3QgaG92ZXJlZAogICAgICBmb3JjZURpc3RhbmNlOiAxMCwgLy9kaXN0YW5jZSBvZiByZWFjdGlvbnMgdG8gbGluZQogICAgICBjdXJyZW50TWVtb3J5OiBudWxsLCAvL3doZW4gY3VycmVudGx5IGRpc3BsYXlpbmcgYSBtZW1vcnksIHBpY2sgdGhlIHJpZ2h0IG9uZSB0byBoaWdobGlnaHQKICAgICAgbmV3TWVtb3J5OiB7CiAgICAgICAgZGF0ZTogbnVsbCwKICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICBwb3NpdGlvbjoge3g6IC0xMDAsIHk6IC0xMDB9LCAvL3N0YXJ0IG91dCBvZiBzaWdodAogICAgICB9LAogICAgfQogIH0sCgogIHByb3BzOiB7CiAgICBvcHRpb25zOiBPYmplY3QsCiAgICBoYXNodGFnOiBTdHJpbmcsCiAgICAvL2RpbWVuc2lvbnM6IE9iamVjdCwKICAgIGNhc2VzOiBBcnJheSwKICAgIG1lbW9yaWVzOiBBcnJheSwKICAgIGRhdGVQaWNrZXI6IEJvb2xlYW4sCiAgICAvL292ZXJsYXk6IEJvb2xlYW4sCgogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBwYXJzZWRDYXNlczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmNhc2VzLm1hcCgoYyxpKSA9PiB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGRhdGVTdHJpbmc6IGMuZCwKICAgICAgICAgIGRhdGU6IHRoaXMucGFyc2VEYXRlKGMuZCksCiAgICAgICAgICB2YWx1ZTogYy52LAogICAgICAgICAgc2xvcGU6IChpPjUpID8gYy52IC0gdGhpcy5jYXNlc1tpLTZdLnYgOiAwIC8vaGVscHMgY29tcHV0aW5nIHRoZSBiZWVzd2FybSdzIGRpc3RhbmNlCiAgICAgICAgfQogICAgICB9KQogICAgfSwKCiAgICBzY2FsZXM6IGZ1bmN0aW9uKCkgewogICAgICBpZighdGhpcy5wYXJzZWRDYXNlcyAmJiB0aGlzLm1lbW9yaWVzKSByZXR1cm4gbnVsbAoKICAgICAgbGV0IHlEb21haW4gPSBbMCxkMy5tYXgoWzUwLGQzLm1heCh0aGlzLnBhcnNlZENhc2VzLCBkPT5kLnZhbHVlKV0pXSAvL21pbmltdW0gb2YgNTAgY2FzZXMgdG8gaGF2ZSBhIHNvbWV3aGF0IGNvbnNpc3RlbnQgbGF5b3V0CiAgICAgIGxldCB4RG9tYWluID0gZDMuZXh0ZW50KHRoaXMucGFyc2VkQ2FzZXMsIGQ9PmQuZGF0ZSkKICAgICAgbGV0IHJhZGl1c0RvbWFpbiA9IGQzLmV4dGVudCh0aGlzLm1lbW9yaWVzLCBkPT5kLndlaWdodCkKCiAgICAgIGxldCB4ID0gZDMuc2NhbGVUaW1lKCkuZG9tYWluKHhEb21haW4pLnJhbmdlKFt0aGlzLm9wdGlvbnMuZGltZW5zaW9ucy5sZWZ0LHRoaXMub3B0aW9ucy5kaW1lbnNpb25zLndpZHRoLXRoaXMub3B0aW9ucy5kaW1lbnNpb25zLnJpZ2h0XSkKICAgICAgbGV0IHkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih5RG9tYWluKS5yYW5nZShbdGhpcy5vcHRpb25zLmRpbWVuc2lvbnMuaGVpZ2h0LXRoaXMub3B0aW9ucy5kaW1lbnNpb25zLmJvdHRvbS10aGlzLm9wdGlvbnMuZGltZW5zaW9ucy50b3AsdGhpcy5vcHRpb25zLmRpbWVuc2lvbnMudG9wXSkKICAgICAgbGV0IHJhZGl1cyA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKHJhZGl1c0RvbWFpbikucmFuZ2UoWzMsNF0pCiAgICAgIAogICAgICByZXR1cm4ge3g6IHgsIHk6IHksIHJhZGl1czogcmFkaXVzfQogICAgfSwKCiAgICBjYXNlTGluZTogZnVuY3Rpb24oKSB7CiAgICAgIGlmKCF0aGlzLnNjYWxlcykgcmV0dXJuIGZhbHNlCgogICAgICBsZXQgYXJyID0gdGhpcy5wYXJzZWRDYXNlcy5tYXAoYyA9PiB7IAogICAgICAgIGMueCA9IHRoaXMuc2NhbGVzLngoYy5kYXRlKQogICAgICAgIGMueSA9IHRoaXMuc2NhbGVzLnkoYy52YWx1ZSkKICAgICAgICByZXR1cm4gYzsKICAgICAgfSkKICAgIHJldHVybiB0aGlzLmxpbmVHZW5lcmF0b3IoYXJyKQogIH0sCgogICAgY2lyY2xlTWVtb3JpZXM6IGZ1bmN0aW9uKCkgewogICAgICBpZighdGhpcy5tZW1vcmllcyAmJiAhdGhpcy5zY2FsZXMpIHJldHVybiBudWxsCiAgICAgIGxldCBhcnIgPSB0aGlzLm1lbW9yaWVzIC8vY3JlYXRlIG5ldyBhcnIsIGJlY2F1c2UgcmVhY3Rpdml0eSAobWF5YmUsIGR1bm5vLCBkaWQgbm90IHdvcmsgd2l0aG91dCBpdCkKICAgICAgCiAgICAgIGxldCBzbG9wZURvbWFpbiA9IGQzLmV4dGVudCh0aGlzLnBhcnNlZENhc2VzLCBkPT5kLnNsb3BlKQoKICAgICAgaWYoYXJyICYmIGFyci5sZW5ndGggPiAwKSB7IC8vY29tcHV0ZSB4L3kgY29vcmRpbmF0ZXMgZm9yIGFsbCBtZW1vcmllcyAoYmVmb3JlIHR1cm5pbmcgdGhlbSBpbnRvIGEgYmVlc3dhcm0pCiAgICAgICAgLy9hcnIgPSBhcnIuZmlsdGVyKG1lbW9yeSA9PiBtZW1vcnkuZGF0ZSA9PSBtZW1vcnkuZW5kZGF0ZSkgLy9vbmx5IGdldCBtZW1vcmllcyB0aGF0IGFyZSBvbmx5IG9uZSBkYXkgbG9uZwogICAgICAgIGFyci5mb3JFYWNoKChtZW1vcnksaSk9PiB7CiAgICAgICAgICBsZXQgc2xvcGUgPSB0aGlzLmdldExpbmVFbGVtZW50KG1lbW9yeS5kYXRlKS5zbG9wZQogICAgICAgICAgbGV0IG1heFNsb3BlID0gc2xvcGUgPj0gMCA/IHNsb3BlRG9tYWluWzFdIDogc2xvcGVEb21haW4gWzBdIC8vaWYgc2xvcGUgaXMgbmVnYXRpdmUsIHVzZSBuZWdhdGl2IG1heCB0byBjb21wdXRlIGRpc3RhbmNlCiAgICAgICAgICBsZXQgc2lnbiA9IChpJTIpID8gLTEgOiAxIC8vc3BsaXQgaW50byBhIGxpbmUgYWJvdmUgYW5kIG9uZSBiZWxvdwogICAgICAgICAgbGV0IGNoYW5nZVkgPSBzaWduICogKE1hdGguYWJzKG1heFNsb3BlKSAtICBNYXRoLmFicyhzbG9wZSkpICogKDEvdGhpcy5mb3JjZURpc3RhbmNlKSAvL2NoYW5nZSBvbiB5IGF4aXMgZGVjcmVhc2VzIGFzIHNsb3BlIGdldHMgaGlnaGVyCiAgICAgICAgICBsZXQgY2hhbmdlWCA9IHNpZ24gKiAobWF4U2xvcGUgIC0gc2xvcGUpICogKDEvdGhpcy5mb3JjZURpc3RhbmNlKSAvL2NoYW5nZSBvbiB5IGF4aXMgZGVjcmVhc2VzIGFzIHNsb3BlIGdldHMgaGlnaGVyCiAgICAgICAgICBtZW1vcnkueSA9IHRoaXMuc2NhbGVzLnkodGhpcy5nZXRMaW5lRWxlbWVudChtZW1vcnkuZGF0ZSkudmFsdWUpICsgY2hhbmdlWQogICAgICAgICAgbWVtb3J5LnggPSB0aGlzLnNjYWxlcy54KHRoaXMucGFyc2VEYXRlKG1lbW9yeS5kYXRlKSkgKyBjaGFuZ2VYCiAgICAgICAgICBtZW1vcnkucmFkaXVzID0gdGhpcy5zY2FsZXMucmFkaXVzKG1lbW9yeS53ZWlnaHQpCiAgICAgICAgfSkKICAgICAgfQogICAgICAvL2Fyci5mb3JFYWNoKG09PmNvbnNvbGUubG9nKG0uaGlkZGVuKSkKICAgICAgLy9jb25zb2xlLmxvZyhhcnIuZmlsdGVyKG09Pm0uYWN0aXZlKSkKICAgICAgcmV0dXJuIGFycgogICAgICAKICAgIH0sCiAgICAKCiAgICAvKmxpbmVNZW1vcmllczogZnVuY3Rpb24oKSB7CiAgICAgIGlmKCF0aGlzLm1lbW9yaWVzICYmICF0aGlzLnNjYWxlcykge2NvbnNvbGUubG9nKHRoaXMubWVtb3JpZXMsdGhpcy5zY2FsZXMpOyByZXR1cm4gbnVsbH0gCiAgICAgIGxldCBhcnIgPSB0aGlzLm1lbW9yaWVzCiAgICAgIGlmKGFyci5sZW5ndGggPiAwKSB7CiAgICAgICAgYXJyID0gYXJyLmZpbHRlcihtZW1vcnkgPT4gbWVtb3J5LmRhdGUgIT0gbWVtb3J5LmVuZGRhdGUpCiAgICAgICAgYXJyLmZvckVhY2goKG1lbW9yeSxpKT0+IHsKICAgICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5nZXRMaW5lU2VnbWVudChtZW1vcnkuZGF0ZSxtZW1vcnkuZW5kZGF0ZSkKICAgICAgICAgIGlmKHNlZ21lbnQubGVuZ3RoID4gMCkgc2VnbWVudC5mb3JFYWNoKHMgPT4gcy55ID0gcy55IC0gNSkgCiAgICAgICAgICBpZihpPT0xKWNvbnNvbGUubG9nKHNlZ21lbnQsdGhpcy5saW5lR2VuZXJhdG9yKHNlZ21lbnQpKQogICAgICAgICAgbWVtb3J5LnBhdGggPSB0aGlzLmxpbmVHZW5lcmF0b3Ioc2VnbWVudCkKICAgICAgICB9KQogICAgICB9CiAgICAgIHJldHVybiBhcnIKICAgIH0sKi8KCgogICAgCiAgLypiZWVzd2FybTogZnVuY3Rpb24oKXsKICAgIGlmKCF0aGlzLmNpcmNsZU1lbW9yaWVzKSByZXR1cm4gbnVsbAogICAKICAgIHJldHVybiAKICB9LCovCn0sCgp3YXRjaDogewogIGNpcmNsZU1lbW9yaWVzOiBmdW5jdGlvbihjaXJjbGVNZW1vcmllcykgewogICAgIGxldCBmb3JjZSA9IGQzLmZvcmNlU2ltdWxhdGlvbihjaXJjbGVNZW1vcmllcykKICAgICAgLmZvcmNlKCdmb3JjZVgnLCBkMy5mb3JjZVgobWVtb3J5ID0+IG1lbW9yeS54KS5zdHJlbmd0aCguMSkpCiAgICAgIC5mb3JjZSgnZm9yY2VZJywgZDMuZm9yY2VZKG1lbW9yeSA9PiBtZW1vcnkueSkuc3RyZW5ndGgoLjEpKQogICAgICAuZm9yY2UoJ2NvbGxpZGUnLCBkMy5mb3JjZUNvbGxpZGUoZCA9PiBkLnJhZGl1cyArIC41KSkKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyArK2kpIHsKICAgICAgZm9yY2UudGljaygpCiAgICB9CiAgICAKICAgIHRoaXMuYmVlc3dhcm0gPSBmb3JjZS5ub2RlcygpCiAgfSwKCiAgaGFzaHRhZzogZnVuY3Rpb24obmV3SGFzaHRhZyl7CiAgICBpZighdGhpcy5iZWVzd2FybSkgcmV0dXJuIG51bGwKICAgIHRoaXMuYmVlc3dhcm0uZm9yRWFjaCgobWVtb3J5LGkpID0+IHsKICAgICAgaWYobmV3SGFzaHRhZyAmJiAhbWVtb3J5LmNvbW1lbnQuaW5jbHVkZXMobmV3SGFzaHRhZykpIHsKICAgICAgICBWdWUuc2V0KHRoaXMuYmVlc3dhcm1baV0sJ2luYWN0aXZlJyx0cnVlKQogICAgICB9IGVsc2UgewogICAgICAgIFZ1ZS5zZXQodGhpcy5iZWVzd2FybVtpXSwnaW5hY3RpdmUnLGZhbHNlKQogICAgICB9CiAgICB9KQogIH0sCgogIGJlZXN3YXJtOiBmdW5jdGlvbihhcnIpIHsgLy9zaG93IGNpcmNsZSBvbiBvdmVybGF5IGFmdGVyIGJlZXN3YXJtIGNoYW5nZWQKICAgIGxldCBjID0gYXJyLmZpbHRlcihlPT5lLmFjdGl2ZSlbMF0KICAgIGlmKGMpIHsKICAgICAgdGhpcy5jdXJyZW50TWVtb3J5ID0gYwogICAgICAgdGhpcy5jdXJyZW50TWVtb3J5LmNvbm5lY3RvciA9IGAKICAgICAgICBNJHtjLnh9ICR7Yy55fQogICAgICAgIFEkeyh0aGlzLm9wdGlvbnMuZGltZW5zaW9ucy53aWR0aC8yKX0gJHtjLnl9CiAgICAgICAgJHsodGhpcy5vcHRpb25zLmRpbWVuc2lvbnMud2lkdGgvMil9ICR7KHRoaXMub3B0aW9ucy5kaW1lbnNpb25zLmhlaWdodC8yKX1gOwogICAgfQogIH0KfSwKCiAgYXN5bmMgbW91bnRlZCgpIHsKICAgIHRoaXMubW91bnRlZCA9IHRydWU7CiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKQogICAgLypkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKQogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKSovCiAgfSwKCiAgbWV0aG9kczogewogICAgaG92ZXI6IGZ1bmN0aW9uKG1lbW9yeSxldmVudCkgeyAvL2hvdmVyaW5nIGNpcmNsZXMKICAgICAgaWYoIXRoaXMuZGF0ZVBpY2tlcikgeyAgLy9kaXNhYmxlIGhvdmVyIHdoZW4gbWVtb3J5IGFkZGluZyBpcyBpbiBwcm9ncmVzcwogICAgICAgIGxldCByID0gMTAKICAgICAgICBsZXQgb3BhY2l0eSA9IDEKICAgICAgICBpZihldmVudC50eXBlID09ICdtb3VzZW91dCcpIHsKICAgICAgICAgIHIgPSBtZW1vcnkud2VpZ2h0CiAgICAgICAgICBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5CiAgICAgICB9CiAgICAgICBkMy5zZWxlY3QoZXZlbnQudGFyZ2V0KS50cmFuc2l0aW9uKCI1MCIpLmF0dHIoInIiLHIpLmF0dHIoIm9wYWNpdHkiLG9wYWNpdHkpCiAgICAgIH0KICAgIH0sCgogICAgZ2V0TGluZUVsZW1lbnQ6IGZ1bmN0aW9uKGRhdGVTdHJpbmcpIHsKICAgICAgbGV0IHZhbHVlT25NZW1vcnlEYXRlID0gdGhpcy5wYXJzZWRDYXNlcy5maW5kKGMgPT4gZGF0ZVN0cmluZyA9PSBjLmRhdGVTdHJpbmcpCiAgICAgIHJldHVybiB2YWx1ZU9uTWVtb3J5RGF0ZSA/IHZhbHVlT25NZW1vcnlEYXRlIDogbnVsbAogICAgfSwKCiAgICBnZXRMaW5lU2VnbWVudDogZnVuY3Rpb24oc3RhcnREYXRlLGVuZERhdGUpIHsKICAgICAgc3RhcnREYXRlID0gKHR5cGVvZiBzdGFydERhdGUgPT09ICdzdHJpbmcnKSA/IHRoaXMucGFyc2VEYXRlKHN0YXJ0RGF0ZSkgOiBzdGFydERhdGUKICAgICAgZW5kRGF0ZSA9ICh0eXBlb2YgZW5kRGF0ZSA9PT0gJ3N0cmluZycpID8gdGhpcy5wYXJzZURhdGUoZW5kRGF0ZSkgOiBlbmREYXRlCiAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5wYXJzZWRDYXNlcy5maWx0ZXIoYyA9PiAvL2dldCBwYXJ0cyBvZiB0aGUgY2FzZUxpbmUgdGhhdCBtYXRjaCBjdXJyZW50IGRhdGVzCiAgICAgICAgICAgIChjLmRhdGUgPCBlbmREYXRlICYmIGMuZGF0ZSA+IHN0YXJ0RGF0ZSkgLy9mb3J3YXJkIG1vdmVtZW50CiAgICAgICAgICAgIHx8IChjLmRhdGUgPiBlbmREYXRlICYmIGMuZGF0ZSA8IHN0YXJ0RGF0ZSkgLy9iYWNrd2FyZCBtb3ZlbWVudAogICAgICAgICAgKQogICAgICByZXR1cm4gc2VnbWVudAogICAgfSwKCiAgICBnZXRSb3VnaERhdGU6IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgaWYoIWRhdGUpIHJldHVybiBudWxsCiAgICAgIAogICAgICBsZXQgcm91Z2ggPSAiTGF0ZSIKICAgICAgaWYoZGF0ZS5nZXREYXRlKCkgPCAyMCkgcm91Z2ggPSAiTWlkIgogICAgICBpZihkYXRlLmdldERhdGUoKSA8IDEwKSByb3VnaCA9ICJFYXJseSIKICAgICAgbGV0IG1vbnRoID0gWyJKYW51YXJ5IiwgIkZlYnJ1YXJ5IiwgIk1hcmNoIiwgIkFwcmlsIiwgIk1heSIsICJKdW5lIiwgIkp1bHkiLCAiQXVndXN0IiwgIlNlcHRlbWJlciIsICJPY3RvYmVyIiwgIk5vdmVtYmVyIiwgIkRlY2VtYmVyIl1bZGF0ZS5nZXRNb250aCgpXQogICAgICAgIAogICAgICByZXR1cm4gcm91Z2grIiAiK21vbnRoCiAgICB9LAoKICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbihldmVudCkgeyAvL2ZvbGxvdyBsaW5lCiAgICAgIGlmKHRoaXMuZGF0ZVBpY2tlcikgewogICAgICAgIGlmKGV2ZW50LmNsaWVudFggPiB0aGlzLnNjYWxlcy54LnJhbmdlKClbMF0gJiYgZXZlbnQuY2xpZW50WCA8IHRoaXMuc2NhbGVzLngucmFuZ2UoKVsxXSkgeyAvL2NoZWNrIHdoZXRoZXIgd2UgYXJlIG1vdmluZyB3aXRoaW4gdmlzIGJvdW5kYXJpZXMgdG8gYXZvaWQgZXJyb3JzCiAgICAgICAgICBsZXQgZGF0ZSA9IHRoaXMuc2NhbGVzLnguaW52ZXJ0KGV2ZW50LmNsaWVudFgpCiAgICAgICAgICBsZXQgZGF0ZVN0cmluZyA9IHRoaXMuZm9ybWF0RGF0ZShkYXRlKQogICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5zY2FsZXMueSh0aGlzLmdldExpbmVFbGVtZW50KGRhdGVTdHJpbmcpLnZhbHVlKQogICAgICAgICAgVnVlLnNldCh0aGlzLm5ld01lbW9yeSwnZGF0ZScsZGF0ZSkgLy9hbHNvIG1vdmUgY2lyY2xlCiAgICAgICAgICBWdWUuc2V0KHRoaXMubmV3TWVtb3J5LnBvc2l0aW9uLCd4JyxldmVudC5jbGllbnRYKSAvL2Fsc28gbW92ZSBjaXJjbGUKICAgICAgICAgIFZ1ZS5zZXQodGhpcy5uZXdNZW1vcnkucG9zaXRpb24sJ3knLHZhbHVlKQogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvL2FsdGVybmF0aXZlIGludGVyYWN0aW9uIHdpdGggZHJhZ2dpbmcgYSBsaW5lCiAgICAvKm9uTW91c2VNb3ZlOiBmdW5jdGlvbihldmVudCkgeyAvL2ZvbGxvdyBsaW5lCiAgICAgIGlmKHRoaXMuZGF0ZVNlbGVjdG9yKSB7CiAgICAgICAgbGV0IGVuZERhdGUgPSB0aGlzLnNjYWxlcy54LmludmVydChldmVudC5jbGllbnRYKQogICAgICAgIGxldCBkYXRlU3RyaW5nID0gdGhpcy5mb3JtYXREYXRlKGVuZERhdGUpCiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5zY2FsZXMueSh0aGlzLmdldExpbmVFbGVtZW50KGRhdGVTdHJpbmcpLnZhbHVlKQoKICAgICAgICBpZih0aGlzLm1vdXNlRG93bikgeyAvL2lmIG1vdXNlIGlmIHByZXNzZWQKICAgICAgICAgIGxldCBhcnIgPSB0aGlzLmdldExpbmVTZWdtZW50KHRoaXMubmV3TWVtb3J5LnN0YXJ0RGF0ZSxlbmREYXRlKQogICAgICAgICAgVnVlLnNldCh0aGlzLm5ld01lbW9yeSwnbGluZScsIHRoaXMubGluZUdlbmVyYXRvcihhcnIpKSAvL2NyZWF0ZSBzdmcgTGluZQogICAgICAgIH0KICAgICAgICBWdWUuc2V0KHRoaXMubmV3TWVtb3J5LmNpcmNsZSwneCcsZXZlbnQuY2xpZW50WCkgLy9hbHNvIG1vdmUgY2lyY2xlCiAgICAgICAgVnVlLnNldCh0aGlzLm5ld01lbW9yeS5jaXJjbGUsJ3knLHZhbHVlKQogICAgICB9CiAgICB9LAoKICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbihldmVudCkgeyAvL2ZvbGxvdyBsaW5lCiAgICAgIGlmKHRoaXMuZGF0ZVNlbGVjdG9yKSB7CiAgICAgICAgdGhpcy5tb3VzZURvd24gPSB0cnVlCiAgICAgICAgbGV0IGV4YWN0RGF0ZSA9IHRoaXMuc2NhbGVzLnguaW52ZXJ0KGV2ZW50LmNsaWVudFgpCiAgICAgICAgVnVlLnNldCh0aGlzLm5ld01lbW9yeSwnc3RhcnREYXRlJyxleGFjdERhdGUpCiAgICAgIH0KICAgIH0sCgogICAgb25Nb3VzZVVwOiBmdW5jdGlvbihldmVudCkgeyAvL2ZvbGxvdyBsaW5lCiAgICAgIGlmKHRoaXMuZGF0ZVNlbGVjdG9yKSB7CiAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZQogICAgICAgIGxldCBleGFjdERhdGUgPSB0aGlzLnNjYWxlcy54LmludmVydChldmVudC5jbGllbnRYKQogICAgICAgIGV4YWN0RGF0ZQogICAgICB9CiAgICB9LCovCiAgfSwKCiAgZGlyZWN0aXZlczogeyAvL2F4aXMgY29tcHV0YXRpb24KICAgIGF4aXMoZWwsIGJpbmRpbmcpIHsKICAgICAgbGV0IGF4aXMgPSBkMy5zZWxlY3QoZWwpCiAgICAgIHN3aXRjaChiaW5kaW5nLmFyZykgewogICAgICAgIGNhc2UgIngiOgogICAgICAgICAgYXhpcy5jYWxsKGQzCiAgICAgICAgICAgIC5heGlzQm90dG9tKGJpbmRpbmcudmFsdWUueCkKICAgICAgICAgICAgLnRpY2tzKGQzLnRpbWVNb250aCkKICAgICAgICAgICAgLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdCgiJWIiKSkKICAgICAgICAgICk7CiAgICAgICAgICBheGlzLnNlbGVjdEFsbCgiLmRvbWFpbiIpLmF0dHIoInN0cm9rZSIsIm5vbmUiKQogICAgICAgICAgYXhpcy5zZWxlY3RBbGwoIi50aWNrIGxpbmUiKS5hdHRyKCJzdHJva2UiLCJub25lIikKICAgICAgICAgIGF4aXMuc2VsZWN0QWxsKCIudGljayB0ZXh0IikKICAgICAgICAgICAgLnN0eWxlKCJ0ZXh0LWFuY2hvciIsICJlbmQiKQogICAgICAgICAgICAuc3R5bGUoInRleHQtdHJhbnNmb3JtIiwgIlVQUEVSQ0FTRSIpCiAgICAgICAgICAgIC5zdHlsZSgib3BhY2l0eSIsIC4zKQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAieSI6CiAgICAgICAgICBheGlzLmNhbGwoZDMKICAgICAgICAgICAgLmF4aXNSaWdodChiaW5kaW5nLnZhbHVlLnkpCiAgICAgICAgICAgIC50aWNrU2l6ZSgtMTAwMCkKICAgICAgICAgICAgLnRpY2tzKDUpCiAgICAgICAgICApOwogICAgICAgICAgYXhpcy5zZWxlY3RBbGwoIi5kb21haW4iKS5hdHRyKCJzdHJva2UiLCJub25lIikKICAgICAgICAgIGF4aXMuc2VsZWN0QWxsKCIudGljayBsaW5lIikuYXR0cigib3BhY2l0eSIsLjA1KQogICAgICAgICAgYXhpcy5zZWxlY3RBbGwoIi50aWNrIHRleHQiKS5hdHRyKCJvcGFjaXR5IiwuMykKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" v-if=\"mounted\" z-index=\"5\">\n    \n    <filter id=\"blurMe\">\n      <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"1\" />\n    </filter>\n    \n    <g class=\"axis xAxis\" v-axis:x=\"scales\" :transform=\"`translate(0,${options.dimensions.height-options.dimensions.top-options.dimensions.bottom+10})`\"></g>\n    <g class=\"axis yAxis\" v-axis:y=\"scales\" :transform=\"`translate(${options.dimensions.width-options.dimensions.right})`\"></g>\n\n    <path\n      :d=\"caseLine\"\n      stroke-width=\"3\"\n      stroke-linecap=\"round\" \n      fill=\"none\"\n      stroke=\"black\"/>\n\n    <g class=\"memories\"  transform=\"translate(0,0)\"> <!-- can go to component, actually.... -->\n      <g v-if=\"beeswarm\">\n        <g v-for=\"memory, j in beeswarm.filter((e,i) => i < options.progress)\" :key=\"j\">\n          <circle\n          \n            :cx=\"memory.x\"\n            :cy=\"memory.y\"\n            :class=\"{inactive: memory.inactive}\"\n            :r=\"memory.radius\"\n            fill=\"#FA5E2D\"\n            :filter=\"(options.overlay) ? 'url(#blurMe)' : ''\"\n            :opacity=\"opacity\"\n\n            @click=\"$emit('showMemory',memory)\"\n            @mouseover=\"hover(memory,$event)\"\n            @mouseout=\"hover(memory,$event)\" />\n          <!--<text\n            :x=\"memory.x\"\n            :y=\"memory.y\"\n           fill=\"#FA5E2D\"\n            @click=\"$emit('showMemory',memory)\"\n            @mouseover=\"hover(memory,$event)\"\n            @mouseout=\"hover(memory,$event)\">{{memory.comment}}\n            </text>-->\n         </g><!-- circleMemories </g>-->\n      </g>\n\n      <!--<g v-for=\"(memory, k) in lineMemories\" :key=\"'line-'+k\" >\n        <path v-if=\"memory.path\" stroke-linecap=\"round\" :opacity=\"opacity\" stroke-dasharray=\"1 5\" stroke-width=\"2\" :d=\"memory.path\" stroke=\"#FA5E2D\" fill=\"none\" />\n      </g>-->\n    </g>\n\n        \n\n  \n\n    <!--<g class=\"dateSelector\" @click=\"$emit('showForm', formatDate(newMemory.date))\" v-if=\"dateSelector\">-->\n    <g class=\"datePicker\" @click=\"$emit('toggleForm', formatDate(newMemory.date))\"\n     v-if=\"datePicker\"\n     :transform=\"`translate(${newMemory.position.x},0)`\"> <!-- can go to own component -->\n      <line y1=\"0\" :y2=\"options.dimensions.height\" x1=\"0\" x2=\"0\" stroke=\"#FA5E2D\" stroke-width=\"2px\"  stroke-dasharray=\"0\"/>\n      <circle r=\"40\" cx=\"0\" :cy=\"newMemory.position.y\" fill=\"#FA5E2D\" />\n      <!--<text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y - 5)\">Click to add</text>-->\n      <text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y)\">{{getRoughDate(newMemory.date)}}</text>\n    </g>\n\n    <g class=\"overlay\" v-if=\"options.overlay\">\n      <rect x=\"0\" y=\"0\" :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" fill=\"black\" opacity=\".5\" pointer-events=\"none\"/>\n      <g v-if=\"currentMemory\">\n\n        <circle\n          r=20\n          :cx=\"currentMemory.x\"\n          :cy=\"currentMemory.y\"\n          fill=\"#FA5E2D\" />\n\n        <path\n          :d=\"currentMemory.connector\"\n          stroke-width=\"2\"\n          fill=\"none\"\n          stroke=\"#FA5E2D\"/>\n\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport * as d3 from 'd3'\n\nexport default {\n  data () {\n    return {\n      parseDate: d3.utcParse(\"%Y-%m-%d\"),\n      formatDate: d3.timeFormat(\"%Y-%m-%d\"),\n      lineGenerator: d3.line().x(d => d.x).y(d => d.y).curve(d3.curveBasis),\n      mounted: false,\n      beeswarm: null,\n      opacity: 0.7, //circle opacity when not hovered\n      forceDistance: 10, //distance of reactions to line\n      currentMemory: null, //when currently displaying a memory, pick the right one to highlight\n      newMemory: {\n        date: null,\n        show: false,\n        position: {x: -100, y: -100}, //start out of sight\n      },\n    }\n  },\n\n  props: {\n    options: Object,\n    hashtag: String,\n    //dimensions: Object,\n    cases: Array,\n    memories: Array,\n    datePicker: Boolean,\n    //overlay: Boolean,\n\n  },\n\n  computed: {\n    parsedCases: function() {\n      return this.cases.map((c,i) => {\n        return {\n          dateString: c.d,\n          date: this.parseDate(c.d),\n          value: c.v,\n          slope: (i>5) ? c.v - this.cases[i-6].v : 0 //helps computing the beeswarm's distance\n        }\n      })\n    },\n\n    scales: function() {\n      if(!this.parsedCases && this.memories) return null\n\n      let yDomain = [0,d3.max([50,d3.max(this.parsedCases, d=>d.value)])] //minimum of 50 cases to have a somewhat consistent layout\n      let xDomain = d3.extent(this.parsedCases, d=>d.date)\n      let radiusDomain = d3.extent(this.memories, d=>d.weight)\n\n      let x = d3.scaleTime().domain(xDomain).range([this.options.dimensions.left,this.options.dimensions.width-this.options.dimensions.right])\n      let y = d3.scaleLinear().domain(yDomain).range([this.options.dimensions.height-this.options.dimensions.bottom-this.options.dimensions.top,this.options.dimensions.top])\n      let radius = d3.scaleLinear().domain(radiusDomain).range([3,4])\n      \n      return {x: x, y: y, radius: radius}\n    },\n\n    caseLine: function() {\n      if(!this.scales) return false\n\n      let arr = this.parsedCases.map(c => { \n        c.x = this.scales.x(c.date)\n        c.y = this.scales.y(c.value)\n        return c;\n      })\n    return this.lineGenerator(arr)\n  },\n\n    circleMemories: function() {\n      if(!this.memories && !this.scales) return null\n      let arr = this.memories //create new arr, because reactivity (maybe, dunno, did not work without it)\n      \n      let slopeDomain = d3.extent(this.parsedCases, d=>d.slope)\n\n      if(arr && arr.length > 0) { //compute x/y coordinates for all memories (before turning them into a beeswarm)\n        //arr = arr.filter(memory => memory.date == memory.enddate) //only get memories that are only one day long\n        arr.forEach((memory,i)=> {\n          let slope = this.getLineElement(memory.date).slope\n          let maxSlope = slope >= 0 ? slopeDomain[1] : slopeDomain [0] //if slope is negative, use negativ max to compute distance\n          let sign = (i%2) ? -1 : 1 //split into a line above and one below\n          let changeY = sign * (Math.abs(maxSlope) -  Math.abs(slope)) * (1/this.forceDistance) //change on y axis decreases as slope gets higher\n          let changeX = sign * (maxSlope  - slope) * (1/this.forceDistance) //change on y axis decreases as slope gets higher\n          memory.y = this.scales.y(this.getLineElement(memory.date).value) + changeY\n          memory.x = this.scales.x(this.parseDate(memory.date)) + changeX\n          memory.radius = this.scales.radius(memory.weight)\n        })\n      }\n      //arr.forEach(m=>console.log(m.hidden))\n      //console.log(arr.filter(m=>m.active))\n      return arr\n      \n    },\n    \n\n    /*lineMemories: function() {\n      if(!this.memories && !this.scales) {console.log(this.memories,this.scales); return null} \n      let arr = this.memories\n      if(arr.length > 0) {\n        arr = arr.filter(memory => memory.date != memory.enddate)\n        arr.forEach((memory,i)=> {\n          let segment = this.getLineSegment(memory.date,memory.enddate)\n          if(segment.length > 0) segment.forEach(s => s.y = s.y - 5) \n          if(i==1)console.log(segment,this.lineGenerator(segment))\n          memory.path = this.lineGenerator(segment)\n        })\n      }\n      return arr\n    },*/\n\n\n    \n  /*beeswarm: function(){\n    if(!this.circleMemories) return null\n   \n    return \n  },*/\n},\n\nwatch: {\n  circleMemories: function(circleMemories) {\n     let force = d3.forceSimulation(circleMemories)\n      .force('forceX', d3.forceX(memory => memory.x).strength(.1))\n      .force('forceY', d3.forceY(memory => memory.y).strength(.1))\n      .force('collide', d3.forceCollide(d => d.radius + .5))\n    for (let i = 0; i < 100; ++i) {\n      force.tick()\n    }\n    \n    this.beeswarm = force.nodes()\n  },\n\n  hashtag: function(newHashtag){\n    if(!this.beeswarm) return null\n    this.beeswarm.forEach((memory,i) => {\n      if(newHashtag && !memory.comment.includes(newHashtag)) {\n        Vue.set(this.beeswarm[i],'inactive',true)\n      } else {\n        Vue.set(this.beeswarm[i],'inactive',false)\n      }\n    })\n  },\n\n  beeswarm: function(arr) { //show circle on overlay after beeswarm changed\n    let c = arr.filter(e=>e.active)[0]\n    if(c) {\n      this.currentMemory = c\n       this.currentMemory.connector = `\n        M${c.x} ${c.y}\n        Q${(this.options.dimensions.width/2)} ${c.y}\n        ${(this.options.dimensions.width/2)} ${(this.options.dimensions.height/2)}`;\n    }\n  }\n},\n\n  async mounted() {\n    this.mounted = true;\n    document.addEventListener('mousemove', this.onMouseMove)\n    /*document.addEventListener('mousedown', this.onMouseDown)\n    document.addEventListener('mouseup', this.onMouseUp)*/\n  },\n\n  methods: {\n    hover: function(memory,event) { //hovering circles\n      if(!this.datePicker) {  //disable hover when memory adding is in progress\n        let r = 10\n        let opacity = 1\n        if(event.type == 'mouseout') {\n          r = memory.weight\n          opacity = this.opacity\n       }\n       d3.select(event.target).transition(\"50\").attr(\"r\",r).attr(\"opacity\",opacity)\n      }\n    },\n\n    getLineElement: function(dateString) {\n      let valueOnMemoryDate = this.parsedCases.find(c => dateString == c.dateString)\n      return valueOnMemoryDate ? valueOnMemoryDate : null\n    },\n\n    getLineSegment: function(startDate,endDate) {\n      startDate = (typeof startDate === 'string') ? this.parseDate(startDate) : startDate\n      endDate = (typeof endDate === 'string') ? this.parseDate(endDate) : endDate\n      let segment = this.parsedCases.filter(c => //get parts of the caseLine that match current dates\n            (c.date < endDate && c.date > startDate) //forward movement\n            || (c.date > endDate && c.date < startDate) //backward movement\n          )\n      return segment\n    },\n\n    getRoughDate: function(date) {\n      if(!date) return null\n      \n      let rough = \"Late\"\n      if(date.getDate() < 20) rough = \"Mid\"\n      if(date.getDate() < 10) rough = \"Early\"\n      let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][date.getMonth()]\n        \n      return rough+\" \"+month\n    },\n\n    onMouseMove: function(event) { //follow line\n      if(this.datePicker) {\n        if(event.clientX > this.scales.x.range()[0] && event.clientX < this.scales.x.range()[1]) { //check whether we are moving within vis boundaries to avoid errors\n          let date = this.scales.x.invert(event.clientX)\n          let dateString = this.formatDate(date)\n          let value = this.scales.y(this.getLineElement(dateString).value)\n          Vue.set(this.newMemory,'date',date) //also move circle\n          Vue.set(this.newMemory.position,'x',event.clientX) //also move circle\n          Vue.set(this.newMemory.position,'y',value)\n        }\n      }\n    },\n\n    //alternative interaction with dragging a line\n    /*onMouseMove: function(event) { //follow line\n      if(this.dateSelector) {\n        let endDate = this.scales.x.invert(event.clientX)\n        let dateString = this.formatDate(endDate)\n        let value = this.scales.y(this.getLineElement(dateString).value)\n\n        if(this.mouseDown) { //if mouse if pressed\n          let arr = this.getLineSegment(this.newMemory.startDate,endDate)\n          Vue.set(this.newMemory,'line', this.lineGenerator(arr)) //create svg Line\n        }\n        Vue.set(this.newMemory.circle,'x',event.clientX) //also move circle\n        Vue.set(this.newMemory.circle,'y',value)\n      }\n    },\n\n    onMouseDown: function(event) { //follow line\n      if(this.dateSelector) {\n        this.mouseDown = true\n        let exactDate = this.scales.x.invert(event.clientX)\n        Vue.set(this.newMemory,'startDate',exactDate)\n      }\n    },\n\n    onMouseUp: function(event) { //follow line\n      if(this.dateSelector) {\n        this.mouseDown = false\n        let exactDate = this.scales.x.invert(event.clientX)\n        exactDate\n      }\n    },*/\n  },\n\n  directives: { //axis computation\n    axis(el, binding) {\n      let axis = d3.select(el)\n      switch(binding.arg) {\n        case \"x\":\n          axis.call(d3\n            .axisBottom(binding.value.x)\n            .ticks(d3.timeMonth)\n            .tickFormat(d3.timeFormat(\"%b\"))\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick text\")\n            .style(\"text-anchor\", \"end\")\n            .style(\"text-transform\", \"UPPERCASE\")\n            .style(\"opacity\", .3)\n          break;\n        case \"y\":\n          axis.call(d3\n            .axisRight(binding.value.y)\n            .tickSize(-1000)\n            .ticks(5)\n          );\n          axis.selectAll(\".domain\").attr(\"stroke\",\"none\")\n          axis.selectAll(\".tick line\").attr(\"opacity\",.05)\n          axis.selectAll(\".tick text\").attr(\"opacity\",.3)\n          break;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.datePicker {\n  cursor: pointer;\n}\n\n.datePicker text {\n  font-size: 12px;\n  pointer-events: none;\n}\n\ncircle.inactive {\n  opacity: .2 !important;\n  fill: grey !important;\n  pointer-events: none;\n}\n\n.datePicker text.strong {\n  font-weight: bold;\n}\n</style>\n"]}]}