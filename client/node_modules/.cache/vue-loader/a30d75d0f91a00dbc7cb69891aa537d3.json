{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/vis.vue?vue&type=style&index=0&id=91b57380&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/vis.vue","mtime":1615567622705},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kYXRlUGlja2VyIHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5kYXRlUGlja2VyIHRleHQgewogIGZvbnQtc2l6ZTogMTJweDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQoKY2lyY2xlLmluYWN0aXZlIHsKICBvcGFjaXR5OiAuMiAhaW1wb3J0YW50OwogIGZpbGw6IGdyZXkgIWltcG9ydGFudDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQoKLmRhdGVQaWNrZXIgdGV4dC5zdHJvbmcgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cg=="},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8RA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" v-if=\"mounted\" z-index=\"5\">\n    \n    <lines\n      :dimensions=\"options.dimensions\"\n      :scales=\"scales\"\n      :cases=\"parsedCases\" />\n\n    <g v-if=\"force\" class=\"memories\"  transform=\"translate(0,0)\"> <!-- can go to component, actually.... -->\n      <circle\n        v-for=\"circle, i in parsedMemories.filter((e,i) => i < options.progress)\" :key=\"'circle-'+i\"\n        :cx=\"circle.x\"\n        :cy=\"circle.y\"\n        :class=\"{inactive: circle.inactive}\"\n        :r=\"circle.radius\"\n        fill=\"#FA5E2D\"\n        :opacity=\"opacity\"\n        @click=\"$emit('showMemory',circle)\"\n        @mouseover=\"hover(circle,$event)\"\n        @mouseout=\"hover(circle,$event)\" />\n         \n      <!-- show hashtag labels (once all memories are visible) -->\n      <g v-if=\"hashtagLabels && options.progress >= parsedMemories.length - 10\">\n        <g v-for=\"(link,i) in hashtagLabels\" :key=\"'label-'+i\" pointer-events=\"none\">\n          <line stroke=\"#FA5E2D\" stroke-width=\".5\" :x1=\"link.source.x\" :y1=\"link.source.y\" :x2=\"link.target.x\" :y2=\"link.target.y+1\" />\n          <text style=\"text-decoration: underline;\" font-weight=\"bold\" fill=\"#FA5E2D\" font-size=\"11\" :x=\"link.target.x\" :text-anchor=\"link.target.anchor\" :y=\"link.target.y\">{{link.target.text}}</text>\n        </g>\n      </g>\n    </g>\n\n\n    <g class=\"datePicker\" @click=\"$emit('toggleForm', formatDate(newMemory.date))\"\n     v-if=\"datePicker\"\n     :transform=\"`translate(${newMemory.position.x},0)`\"> <!-- can go to own component -->\n      <line y1=\"0\" :y2=\"options.dimensions.height\" x1=\"0\" x2=\"0\" stroke=\"#FA5E2D\" stroke-width=\"2px\"  stroke-dasharray=\"0\"/>\n      <circle r=\"40\" cx=\"0\" :cy=\"newMemory.position.y\" fill=\"#FA5E2D\" />\n      <!--<text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y - 5)\">Click to add</text>-->\n      <text x=\"0\" text-anchor=\"middle\" :y=\"(newMemory.position.y)\">{{getRoughDate(newMemory.date)}}</text>\n    </g>\n\n    <g class=\"overlay\" v-if=\"options.overlay\">\n      <rect x=\"0\" y=\"0\" :width=\"options.dimensions.width\" :height=\"options.dimensions.height\" fill=\"black\" opacity=\".5\" pointer-events=\"none\"/>\n      <g v-if=\"currentMemory\">\n\n        <circle\n          r=20\n          :cx=\"currentMemory.x\"\n          :cy=\"currentMemory.y\"\n          fill=\"#FA5E2D\" />\n\n        <path\n          :d=\"currentMemory.connector\"\n          stroke-width=\"2\"\n          fill=\"none\"\n          stroke=\"#FA5E2D\"/>\n\n      </g>\n    </g>\n  </svg>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport * as d3 from 'd3'\n//import {annotation, annotationCallout} from \"d3-svg-annotation\"\nimport lines from './lines'\n\nexport default {\n  components: {\n    lines,\n  },\n  data () {\n    return {\n      parseDate: d3.utcParse(\"%Y-%m-%d\"),\n      formatDate: d3.timeFormat(\"%Y-%m-%d\"),\n      lineGenerator: d3.line().x(d => d.x).y(d => d.y).curve(d3.curveBasis),\n      mounted: false,\n      force: null,\n      opacity: 0.8, //circle opacity when not hovered\n      forceDistance: 8, //distance of reactions to line\n      currentMemory: null, //when currently displaying a memory, pick the right one to highlight\n      newMemory: {\n        date: null,\n        show: false,\n        position: {x: -100, y: -100}, //start out of sight\n      },\n    }\n  },\n\n  props: {\n    options: Object,\n    hashtag: String,\n    cases: Array,\n    memories: Array,\n    datePicker: Boolean,\n\n  },\n\n  computed: {\n    parsedCases: function() {\n      return this.cases.map((c) => {\n        return {\n          dateString: c.d,\n          date: this.parseDate(c.d),\n          value: c.v,\n        }\n      })\n    },\n\n    scales: function() {\n      if(!this.parsedCases && this.memories) return null\n\n      let yDomain = [0,d3.max([50,d3.max(this.parsedCases, d=>d.value)])] //minimum of 50 cases to have a somewhat consistent layout\n      let xDomain = d3.extent(this.parsedCases, d=>d.date)\n      let radiusDomain = d3.extent(this.memories, d=>d.weight)\n\n      let x = d3.scaleTime().domain(xDomain).range([this.options.dimensions.left,this.options.dimensions.width-this.options.dimensions.right])\n      let y = d3.scaleLinear().domain(yDomain).range([this.options.dimensions.height-this.options.dimensions.bottom-this.options.dimensions.top,this.options.dimensions.top])\n      let radius = d3.scaleLinear().domain(radiusDomain).range([2,6])\n      \n      return {x: x, y: y, radius: radius}\n    },\n\n    parsedMemories: function() {\n      if(!this.memories) return null\n\n      this.scales //mention to force recomputation if dimensions change\n\n      return this.memories.map((memory,i) => {\n        let sign = (i%2) ? 1 : -1\n        memory.Date = this.parseDate(memory.date)\n        memory.x = this.scales.x(memory.Date)\n        memory.value = this.getLineElement(memory.date).value\n        memory.y = this.scales.y(memory.value) + this.forceDistance * sign\n        memory.radius = this.scales.radius(memory.weight)\n        memory.hashtag = (memory.comment.match(/#[a-z]+/gi)) ? (memory.comment.match(/#[a-z]+/gi))[0] : null \n\n        return memory\n      })\n    },\n\n    //generate force directed hashtags of X most weightened labels\n    hashtagLabels() {\n      if(!this.memories) return null\n      this.scales //mention to force recomputation if dimensions change\n\n      let nodes = []\n      let links = [] //\n\n      let memoriesWithTags = this.memories.filter(memory => memory.hashtag && !memory.inactive) //all active memories that have hashtags\n      \n      let latestHashtag = [...memoriesWithTags].sort((a,b) => b.Date - a.Date)[0] //the latest memory that has a hashtag\n      let selectedTags = memoriesWithTags.sort((a,b) => b.weight - a.weight).slice(0,10) //the X most weightened labels\n      selectedTags.push(latestHashtag) //the newest one (to put them into the view)\n\n      selectedTags.forEach((memory,i) => { //create node-link data\n          nodes.push({type: \"circle\", fx: memory.x, fy: memory.y}) //origin\n          nodes.push({type: \"label\", text: memory.hashtag}) //target\n          links.push({source: i*2, target: i*2+1}) //link the two\n        })\n\n        var simulation = d3.forceSimulation(nodes) //generate force directed simulation\n        .force('charge', d3.forceManyBody().strength(-0))\n        .force('link', d3.forceLink().links(links))\n        //.force('forceY', d3.forceY())\n        .force('collide', d3.forceCollide(node => {return (node.text) ? node.text.length * 2 : 50}))\n\n        for(let i = 0; i <= 200; i++) {\n          simulation.tick()\n        }\n\n        links.forEach(link => {\n          link.target.anchor = (link.target.x > link.source.x) ? \"start\" : \"end\"\n        })\n      return links\n\n    },\n  },\n\n  watch: {\n    parsedMemories: function(memories) {\n      this.releaseTheBees(memories)\n   },\n\n    hashtag: function(newHashtag){\n      if(!this.memories) return null\n      this.memories.forEach((memory,i) => {\n        if(newHashtag && !memory.comment.includes(newHashtag)) {\n          Vue.set(this.memories[i],'inactive',true)\n        } else {\n          Vue.set(this.memories[i],'inactive',false)\n        }\n      })\n    },\n\n    memories: function(arr) { //show circle on overlay after beeswarm changed\n      let c = arr.filter(e=>e.active)[0]\n      if(c) {\n        this.currentMemory = c\n         this.currentMemory.connector = `\n          M${c.x} ${c.y}\n          Q${(this.options.dimensions.width/2)} ${c.y}\n          ${(this.options.dimensions.width/2)} ${(10)}`;\n      }\n    }\n  },\n\n  async mounted() {\n    this.releaseTheBees(this.memories)\n    document.addEventListener('mousemove', this.onMouseMove)\n    this.mounted = true;\n  },\n\n  methods: {\n    releaseTheBees: function(memories) {\n      \n      this.force = d3.forceSimulation(memories)\n      .force('forceX', d3.forceX(memory => memory.x).strength(.1))\n      .force('forceY', d3.forceY(memory => memory.y).strength(.1))\n      .force('collide', d3.forceCollide(d => d.radius + .5))\n\n      for(let i = 0; i <= 20; i++) {\n        this.force.tick()\n      }\n    },\n\n    hover: function(memory,event) { //hovering circles\n      if(!this.datePicker) {  //disable hover when memory adding is in progress\n        let r = 10\n        let opacity = 1\n        if(event.type == 'mouseout') {\n          r = memory.weight\n          opacity = this.opacity\n       }\n       d3.select(event.target).transition(\"50\").attr(\"r\",r).attr(\"opacity\",opacity)\n      }\n    },\n\n    getLineElement: function(dateString) {\n      let valueOnMemoryDate = this.parsedCases.find(c => dateString == c.dateString)\n      return valueOnMemoryDate ? valueOnMemoryDate : null\n    },\n\n    getLineSegment: function(startDate,endDate) {\n      startDate = (typeof startDate === 'string') ? this.parseDate(startDate) : startDate\n      endDate = (typeof endDate === 'string') ? this.parseDate(endDate) : endDate\n      let segment = this.parsedCases.filter(c => //get parts of the caseLine that match current dates\n            (c.date < endDate && c.date > startDate) //forward movement\n            || (c.date > endDate && c.date < startDate) //backward movement\n          )\n      return segment\n    },\n\n    getRoughDate: function(date) {\n      if(!date) return null\n      \n      let rough = \"Late\"\n      if(date.getDate() <= 20) rough = \"Mid\"\n      if(date.getDate() <= 10) rough = \"Early\"\n      let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][date.getMonth()]\n        \n      return rough+\" \"+month\n    },\n\n    onMouseMove: function(event) { //follow line\n      if(this.datePicker) {\n        if(event.clientX > this.scales.x.range()[0] && event.clientX < this.scales.x.range()[1]) { //check whether we are moving within vis boundaries to avoid errors\n          let date = this.scales.x.invert(event.clientX)\n          let dateString = this.formatDate(date)\n          let value = this.scales.y(this.getLineElement(dateString).value)\n          Vue.set(this.newMemory,'date',date) //also move circle\n          Vue.set(this.newMemory.position,'x',event.clientX) //also move circle\n          Vue.set(this.newMemory.position,'y',value)\n        }\n      }\n    },\n  },\n\n  /*updated: function() {\n    console.log(\"foo\")\n      this.force.tick()\n  },*/\n}\n</script>\n\n<style scoped>\n.datePicker {\n  cursor: pointer;\n}\n\n.datePicker text {\n  font-size: 12px;\n  pointer-events: none;\n}\n\ncircle.inactive {\n  opacity: .2 !important;\n  fill: grey !important;\n  pointer-events: none;\n}\n\n.datePicker text.strong {\n  font-weight: bold;\n}\n</style>"]}]}