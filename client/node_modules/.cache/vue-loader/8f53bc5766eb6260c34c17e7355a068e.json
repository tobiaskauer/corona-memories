{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/components/counter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/components/counter.vue","mtime":1614173414483},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgICAgY291bnRlcjogMCwKICAgIH0KICB9LAoKIGNvbXB1dGVkOiB7CiAgICAgIGRheXNTaW5jZVN0YXJ0OiBmdW5jdGlvbigpIHsgLy9mb3IgYW5pbWF0ZWQgY291bnRlcgogICAgICBsZXQgc3RhcnQgPSBuZXcgRGF0ZSgiMjAyMC0wMS0yMiIpCiAgICAgIGxldCB0b2RheSA9IG5ldyBEYXRlKCkKICAgICAgcmV0dXJuIE1hdGguY2VpbCgodG9kYXktc3RhcnQpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKQogICAgfQogfSwKCiBtb3VudGVkICgpIHsKICAgICB0aGlzLmNvdW50KCkKIH0sCgogIG1ldGhvZHM6IHsKICAgIGNvdW50OiBmdW5jdGlvbigpIHsKICAgICAgc2V0VGltZW91dCgoKSAgPT4gewogICAgICAgIHRoaXMuY291bnRlcisrCiAgICAgICBpZih0aGlzLmNvdW50ZXIgPD0gdGhpcy5kYXlzU2luY2VTdGFydCkgdGhpcy5jb3VudCgpOwogICAgICB9LCA1KTsKICAgIH0sCiAgfQp9Cg=="},{"version":3,"sources":["counter.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"counter.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <strong>{{counter}}</strong>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n        counter: 0,\n    }\n  },\n\n computed: {\n      daysSinceStart: function() { //for animated counter\n      let start = new Date(\"2020-01-22\")\n      let today = new Date()\n      return Math.ceil((today-start) / (1000 * 60 * 60 * 24))\n    }\n },\n\n mounted () {\n     this.count()\n },\n\n  methods: {\n    count: function() {\n      setTimeout(()  => {\n        this.counter++\n       if(this.counter <= this.daysSinceStart) this.count();\n      }, 5);\n    },\n  }\n}\n</script>\n\n<style scoped>\n</style>\n"]}]}