{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/App.vue","mtime":1614783699875},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9U2hpcHBvcmkrTWluY2hvK0IxOndnaHRAODAwJmRpc3BsYXk9c3dhcCcpOwoKLmludHJvV3JhcHBlciB7CiAgb3ZlcmZsb3c6dmlzaWJsZTsKICAKICAvL2JhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgyNTUsIDIzNSwgMTk4LCAuMDUpIDAlLCByZ2JhKDI1NSwgMjM1LCAxOTgsIDEpIDkwJSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKSAxMDAlKTsKICBwYWRkaW5nOiAwIDEwMHB4IDUwcHggMjBweDsKICBmb250LWZhbWlseTogJ1JvYm90byBTYW5zJzsKICB3aWR0aDogMzMlOwoKfQoKLmludHJvV3JhcHBlciBwIHsKICBtaW4td2lkdGg6IDIwMHB4OwogIG1heC13aWR0aDogNTAwcHg7fQoKaDF7CiAgZm9udC1mYW1pbHk6ICdTaGlwcG9yaSBNaW5jaG8gQjEnLCBzZXJpZjsKICBmb250LXNpemU6IDQwcHg7CiAgY29sb3I6ICNGQTVFMkQ7Cn0KCgoudmlzV3JhcHBlciB7CiAgcG9zaXRpb246IGZpeGVkOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQoKCiNhcHAgewogIGJhY2tncm91bmQ6ICNGRkVCQzY7CiAgbWluLWhlaWdodDogMTAwJTsKICBoZWlnaHQ6IDEwMCUKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <Scrollama @step-enter=\"stepEnterHandler\">\n\n  <v-app>\n    <div class=\"formWrapper\" v-if=\"newMemory.showForm\">\n      <memoryForm\n        :date=\"newMemory.date\"\n        :country=\"currentCountry\"\n        @close=\"toggleForm(false)\"\n        />\n    </div>\n    <div class=\"memoryWrapper\" v-if=\"displayMemory.display\">\n      <memoryDisplay\n        :memory=\"displayMemory.memory\"\n        @close=\"showMemory(false)\"\n      />\n    </div>\n    <div class=\"visWrapper\">\n      <vis\n        v-if=\"cases\"\n        :dimensions=\"dimensions\"\n        :cases=\"cases\"\n        :country=\"currentCountry\"\n        :memories=\"memories\"\n        :dateSelector=\"newMemory.showLine\"\n        :overlay=\"overlay\"\n        :active=\"displayMemory.memory\"\n        @showForm=\"toggleForm($event)\"\n        @showMemory=\"showMemory\" />\n    </div>\n\n    <div class=\"introWrapper\">\n      <h1>corona diaries</h1>\n      <p>It did not happen over night, but everything is different now. What are your memories, experiences and feelings after living in a pandemic for <counter /> days?</p>\n      <v-select\n        v-if=\"countries\"\n        :items=\"countries\"\n        v-model=\"currentCountry\"\n        label=\"Your country\"\n        outlined\n        >\n      </v-select>\n      <v-btn\n        color=\"primary\"\n        outlined\n        block\n        @click=\"showLine(true)\"\n        >I have a memory</v-btn>\n    </div>\n  </v-app>\n   </Scrollama>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport AsyncComputed from 'vue-async-computed'\nVue.use(AsyncComputed)\n\nimport caseService from '@/services/caseService'\nimport memoryService from '@/services/memoryService'\n\nimport 'intersection-observer' // for cross-browser support\nimport Scrollama from 'vue-scrollama'\n\nimport memoryForm from './components/memoryForm'\nimport memoryDisplay from './components/memoryDisplay'\nimport counter from './components/counter'\nimport vis from './components/vis'\n\nexport default {\n  name: 'App',\n  components: {\n    memoryForm,\n    memoryDisplay,\n    counter,\n    vis\n  },\n\n  data () {\n    return {\n      mounted: false,\n      dimensions: {width: 0, height: 0, top: 20, right: 50, bottom: 50, left: 50},\n      countries: null,\n      currentCountry: \"Germany\",\n      overlay: false,\n\n      displayMemory: {\n        display: false,\n        current: null\n      },\n      newMemory: {\n        showLine: false,\n        showForm: false,\n        date: \"\"\n        //date: \"2020-02-23\" //to quicker test form\n      }\n    }\n  },\n\n  asyncComputed: {\n    async cases() {\n      return (await caseService.getCases({country: this.currentCountry, metric: \"relative_cases\"})).data\n    },\n    async memories() {\n      return (await memoryService.getMemories({country: this.currentCountry})).data\n    }\n  },\n\n  created() {\n    window.addEventListener(\"resize\", this.resize);\n  },\n\n  async mounted () {\n    this.countries = (await caseService.getCountries()).data.map(e => e.country)\n    this.$nextTick(() => {\n      this.resize()\n      this.mounted = true;\n    })\n },\n\n  methods: {\n    resize: function() {\n      this.dimensions.width = window.innerWidth\n      this.dimensions.height = window.innerHeight\n    },\n\n    showMemory: function(memory) {\n      if(memory) {\n        Vue.set(this.memories[this.memories.findIndex(e => e.id == memory.id)],'active',true)\n        Vue.set(this.displayMemory,'memory',memory)\n        Vue.set(this.displayMemory,'display',true)\n        this.overlay = true\n      } else {\n        Vue.set(this.displayMemory,'display',false)\n        Vue.set(this.memories[this.memories.findIndex(e => e.active)],'active',false)\n        this.overlay = false\n      }\n    },\n\n    showLine: function(show) {\n      Vue.set(this.newMemory,'showLine',show)\n    },\n\n    toggleForm: function(event) { //using an own method instead of inline assignment to stay sane\n      if(event) {\n        Vue.set(this.newMemory,'date',event)\n        Vue.set(this.newMemory,'showLine',false)\n        Vue.set(this.newMemory,'showForm',true)\n        this.overlay = true\n      } else {\n        Vue.set(this.newMemory,'showForm',false)\n        this.overlay = false\n      }\n    }\n  }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Shippori+Mincho+B1:wght@800&display=swap');\n\n.introWrapper {\n  overflow:visible;\n  \n  //background: linear-gradient(90deg, rgba(255, 235, 198, .05) 0%, rgba(255, 235, 198, 1) 90%, rgba(255, 255, 255, 0) 100%);\n  padding: 0 100px 50px 20px;\n  font-family: 'Roboto Sans';\n  width: 33%;\n\n}\n\n.introWrapper p {\n  min-width: 200px;\n  max-width: 500px;}\n\nh1{\n  font-family: 'Shippori Mincho B1', serif;\n  font-size: 40px;\n  color: #FA5E2D;\n}\n\n\n.visWrapper {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n}\n\n\n#app {\n  background: #FFEBC6;\n  min-height: 100%;\n  height: 100%\n}\n</style>\n"]}]}