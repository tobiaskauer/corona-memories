{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/App.vue","mtime":1615566409807},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}