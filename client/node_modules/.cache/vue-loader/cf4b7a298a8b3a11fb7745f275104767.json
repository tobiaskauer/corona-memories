{"remainingRequest":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/corona-memories/client/src/App.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/corona-memories/client/src/App.vue","mtime":1614793238685},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/corona-memories/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvK1NsYWI6d2dodEA0MDA7OTAwJmRpc3BsYXk9c3dhcCcpOwoKLmludHJvV3JhcHBlciwgLmV4cGxvcmF0aW9uV3JhcHBlciwgLmFuaW1hdG9yV3JhcHBlciAgewogIGJvcmRlcjogMXB4IGRvdHRlZCBibGFjazsKICAKCiAgaGVpZ2h0OiAxMDB2aDsKICBwYWRkaW5nLXRvcDogMTUwcHg7Cn0KCi5zY3JvbGxhbWEgewogIHdpZHRoOiA0MCU7CiAgcGFkZGluZzogMCAwcHggNTBweCAzMHB4OwogIG1pbi13aWR0aDogMjAwcHg7CiAgbWF4LXdpZHRoOiA0MDBweDsKICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2VyaWY7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KCmJ1dHRvbiwgLnYtaW5wdXQgewogIHBvaW50ZXItZXZlbnRzOiBhbGw7Cn0KCmgxewogIG1hcmdpbjogNTBweCAwIDAgMzBweDsKICBoZWlnaHQ6IDEwMHB4OwogIHBvc2l0aW9uOiBmaXhlZDsKICBmb250LWZhbWlseTogJ1JvYm90byBTbGFiJywgc2VyaWY7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBmb250LXNpemU6IDQwcHg7CiAgY29sb3I6ICNGQTVFMkQ7CiAgbGluZS1oZWlnaHQ6IDMwcHg7Cn0KCmgxIHNwYW57CiAgZm9udC13ZWlnaHQ6IDkwMDsKfQoKcCB7CiAgZm9udC1mYW1pbHk6ICdSb2JvdG8gU2xhYicsIHNlcmlmOwogIGZvbnQtd2VpZ2h0OiA0MDA7Cn0KCnAubGFyZ2VyIHsKICBmb250LXNpemU6IDEuMmVtOwp9CgpwLnNtYWxsZXIgewogIGNvbG9yOiByZ2JhKDAsMCwwLC41KTsKICBmb250LXNpemU6IDlweDsKICBsaW5lLWhlaWdodDogMTBweDsKfQoKLnZpc1dyYXBwZXIgewogIHBvc2l0aW9uOiBmaXhlZDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0KCgojYXBwIHsKICBiYWNrZ3JvdW5kOiAjRkZFQkM2OwogIG1pbi1oZWlnaHQ6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlCn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoOA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <v-app>\n    <template v-if=\"cases && memories && countries && mounted\">\n    <h1>corona<br /><span>memories</span></h1>\n    <Scrollama\n      class=\"scrollama\"\n      :progress=\"true\"\n      @step-enter=\"stepEnterHandler\"\n      @step-progress=\"stepProgressHandler\"\n    >\n      <div slot=\"graphic\" class=\"visWrapper\">\n        <vis\n          :cases=\"cases\"\n          :memories=\"memories\"\n          :options=\"visOptions\"\n          :country=\"currentCountry\"\n          :dateSelector=\"newMemory.showLine\"\n          @showForm=\"toggleForm($event)\"\n          @showMemory=\"showMemory\" />\n      </div>\n\n        <div class=\"introWrapper\" data-step=\"1\">  \n          <p class=\"larger\"> Numbers do not tell stories. <strong>People do.</strong></p>\n          <p>Since the start of the pandemic <counter /> days ago, we are confronted with charts about new cases or even deaths. What are the human stories behind the numbers?</p>\n          <p class=\"smaller\">The research is conducted by Tobias Kauer (University of Edinburgh), Benjamin Bach (University of Edinburgh), and Marian DÃ¶rk (Potsdam University of Applied Sciences). It has been granted approval by the ethics committee. By clicking the button, you indicate that you are a speaker of English and at least 18 years old. You read the information letter and you voluntarily agree to  participate, and understand you can stop your participation at any time. You agree that your anonymous data may be kept permanently in Edinburgh University archived and may be used by qualified researchers for teaching and research purposes.</p>\n          \n          <template v-if=\"!consent\">\n            <v-btn color=\"primary\" outlined @click=\"consent = true\">\n              <v-icon small>mdi-check-circle</v-icon>\n             I agree, show me\n            </v-btn>\n          </template>\n          <template v-else>\n            <v-btn color=\"primary\" outlined @click=\"scrollDown\">\n              <v-icon small>mdi-south</v-icon>\n              Scroll down\n            </v-btn>\n          </template>\n        </div>\n\n        <div class=\"animatorWrapper\" data-step=\"2\" ></div>\n\n        <div v-if=\"consent\" id=\"target\" class=\"explorationWrapper\" data-step=\"3\">\n          <p>Add your story to the curve</p>\n          <v-select\n            :items=\"countries\"\n            v-model=\"currentCountry\"\n            label=\"Your country\"\n            outlined />\n          <v-btn\n            color=\"primary\"\n            outlined\n            block\n            @click=\"showLine(true)\"\n          > I have a memory</v-btn>\n        </div>\n\n        \n      \n\n      <div class=\"formWrapper\" v-if=\"newMemory.showForm\">\n        <memoryForm\n          :date=\"newMemory.date\"\n          :country=\"currentCountry\"\n          @close=\"toggleForm(false)\"/>\n      </div>\n      <div class=\"memoryWrapper\" v-if=\"displayMemory.display\">\n        <memoryDisplay\n          :memory=\"displayMemory.memory\"\n          @close=\"showMemory(false)\"/>\n      </div>\n    </Scrollama>\n    </template>\n    <template v-else>\n      <v-card class=\"d-flex justify-center mb-6\" color=\"rgb(255, 0, 0, 0.0)\" elevation=\"0\" style=\"margin-top: 100px;\">\n        <v-progress-circular\n        :size=\"300\"\n        indeterminate\n        color=\"primary\"\n        >Loading ...<br />try refresing?</v-progress-circular>\n      </v-card>\n      </template>\n  </v-app>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport AsyncComputed from 'vue-async-computed'\nVue.use(AsyncComputed)\nimport 'intersection-observer' // for cross-browser support\nimport Scrollama from 'vue-scrollama'\n\n\nimport caseService from '@/services/caseService'\nimport memoryService from '@/services/memoryService'\n\n\n\nimport memoryForm from './components/memoryForm'\nimport memoryDisplay from './components/memoryDisplay'\nimport counter from './components/counter'\nimport vis from './components/vis'\n\nexport default {\n  name: 'App',\n  components: {\n    Scrollama,\n    memoryForm,\n    memoryDisplay,\n    counter,\n    vis\n  },\n\n  data () {\n    return {\n      mounted: false,\n      consent: false,\n      countries: null,\n      currentCountry: \"Germany\",      \n\n      visOptions: {\n        dimensions: {width: 0, height: 0, top: 20, right: 50, bottom: 50, left: 50},\n        progess: 0,\n        overlay: false,\n        displayMemory: false\n      },\n\n      displayMemory: {\n        display: false,\n      },\n      newMemory: {\n        showLine: false,\n        showForm: false,\n        date: \"\"\n        //date: \"2020-02-23\" //to quicker test form\n      }\n    }\n  },\n\n  asyncComputed: {\n    async cases() {\n      return (await caseService.getCases({country: this.currentCountry, metric: \"relative_cases\"})).data\n    },\n    async memories() {\n      return (await memoryService.getMemories({country: this.currentCountry})).data\n    }\n  },\n\n  created() {\n    window.addEventListener(\"resize\", this.resize);\n  },\n\n  async mounted () {\n    this.countries = (await caseService.getCountries()).data.map(e => e.country)\n    this.$nextTick(() => {\n      this.resize()\n      this.mounted = true;\n    })\n },\n\n  methods: {\n    resize: function() {\n      Vue.set(this.visOptions.dimensions,'width',window.innerWidth)\n      //Vue.set(this.visOptions.dimensions,'height',window.innerHeight)\n      Vue.set(this.visOptions.dimensions,'height',500)\n    },\n\n    scrollDown: function() {\n     // this.$nextTick(() => {\n        this.$vuetify.goTo(\"#target\", {duration: 2000});\n      //});\n    },\n\n    showMemory: function(memory) {\n      if(memory) {\n        Vue.set(this.memories[this.memories.findIndex(e => e.id == memory.id)],'active',true)\n        Vue.set(this.displayMemory,'memory',memory)\n        Vue.set(this.displayMemory,'display',true)\n        this.overlay = true\n      } else {\n        Vue.set(this.displayMemory,'display',false)\n        Vue.set(this.memories[this.memories.findIndex(e => e.active)],'active',false)\n        this.overlay = false\n      }\n    },\n\n    stepEnterHandler({element, direction}) {\n      direction //maybe we need this later\n      switch(element.className) {\n        case \"introWrapper\": \n           Vue.set(this.visOptions,'progress',0)\n          break\n      }\n      //this.currStepId = element.dataset.stepId\n    },\n\n    stepProgressHandler({element, progress}) {\n      if(element.className == \"animatorWrapper\" && this.consent) {\n        let showElementsNumber = Math.ceil(progress * this.memories.length)\n        Vue.set(this.visOptions,'progress',showElementsNumber)\n      }\n      \n     \n      \n    },\n\n    showLine: function(show) {\n      Vue.set(this.newMemory,'showLine',show)\n    },\n\n    toggleForm: function(event) { //using an own method instead of inline assignment to stay sane\n      if(event) {\n        Vue.set(this.newMemory,'date',event)\n        Vue.set(this.newMemory,'showLine',false)\n        Vue.set(this.newMemory,'showForm',true)\n        this.overlay = true\n      } else {\n        Vue.set(this.newMemory,'showForm',false)\n        this.overlay = false\n      }\n    }\n  }\n}\n</script>\n\n<style src=\"vue-scrollama/dist/vue-scrollama.css\"></style>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;900&display=swap');\n\n.introWrapper, .explorationWrapper, .animatorWrapper  {\n  border: 1px dotted black;\n  \n\n  height: 100vh;\n  padding-top: 150px;\n}\n\n.scrollama {\n  width: 40%;\n  padding: 0 0px 50px 30px;\n  min-width: 200px;\n  max-width: 400px;\n  font-family: 'Roboto Slab', serif;\n  pointer-events: none;\n}\n\nbutton, .v-input {\n  pointer-events: all;\n}\n\nh1{\n  margin: 50px 0 0 30px;\n  height: 100px;\n  position: fixed;\n  font-family: 'Roboto Slab', serif;\n  font-weight: 400;\n  font-size: 40px;\n  color: #FA5E2D;\n  line-height: 30px;\n}\n\nh1 span{\n  font-weight: 900;\n}\n\np {\n  font-family: 'Roboto Slab', serif;\n  font-weight: 400;\n}\n\np.larger {\n  font-size: 1.2em;\n}\n\np.smaller {\n  color: rgba(0,0,0,.5);\n  font-size: 9px;\n  line-height: 10px;\n}\n\n.visWrapper {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n}\n\n\n#app {\n  background: #FFEBC6;\n  min-height: 100%;\n  height: 100%\n}\n</style>\n"]}]}